{"version":3,"file":"date-picker-driver.js","sourceRoot":"","sources":["../../../test-kit/components/date-picker-driver.ts"],"names":[],"mappings":"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","sourcesContent":["import {DriverBase, selectDom, simulate, trigger} from 'test-drive-react';\nimport {DatePicker} from '../../src';\nimport {getDayNames} from '../../src/utils';\n\nconst bodySelect = selectDom(document.body);\nconst datePickerDropdown = 'DATE_PICKER_DROPDOWN';\n\nexport class DatePickerTestDriver extends DriverBase {\n    public static ComponentClass = DatePicker;\n\n    public get input(): HTMLInputElement {\n        return this.select<HTMLInputElement>('DATE_PICKER_INPUT');\n    }\n\n    public get selectedDate(): string {\n        return this.select<HTMLInputElement>('DATE_PICKER_INPUT').value;\n    }\n\n    public changeDate(value: string): void {\n        trigger.change(this.input, value);\n        simulate.blur(this.input);\n    }\n\n    public focus(): void {\n        simulate.focus(this.input);\n    }\n\n    public clickOnDatePicker(): void {\n        simulate.mouseDown(this.input);\n    }\n\n    public clickOnDay(day: number): void {\n        simulate.mouseDown(this.getDay(day));\n    }\n\n    public clickOnNextMonth(): void {\n        simulate.mouseDown(this.nextMonthLabel);\n    }\n\n    public clickOnPrevMonth(): void {\n        simulate.mouseDown(this.prevMonthLabel);\n    }\n\n    public openCalender(): void {\n        simulate.click(this.select('CALENDAR_ICON'));\n    }\n\n    public isOpen(): boolean {\n        return !!this.dropDown;\n    }\n\n    public keyPress(keyCode: number): void {\n        simulate.keyDown(this.input, {keyCode});\n    }\n\n    public get nextMonthLabel(): HTMLSpanElement | null {\n        return bodySelect('NEXT_MONTH_BUTTON');\n    }\n\n    public get prevMonthLabel(): HTMLSpanElement | null {\n        return bodySelect('PREV_MONTH_BUTTON');\n    }\n\n    public get dropDown(): HTMLDivElement | null {\n        return bodySelect(datePickerDropdown);\n    }\n\n    public getDay(day: number | string): HTMLSpanElement | null {\n        return bodySelect(datePickerDropdown, `DAY_${day}`);\n    }\n\n    public getPrevDay(day: number | string): HTMLSpanElement | null {\n        return bodySelect(datePickerDropdown, `PREV_DAY_${day}`);\n    }\n\n    public getNextDay(day: number | string): HTMLSpanElement | null {\n        return bodySelect(datePickerDropdown, `NEXT_DAY_${day}`);\n    }\n\n    public getDayName(dayName: number): HTMLSpanElement | null {\n        if (dayName < 0 || dayName > 6) {\n            return null;\n        }\n        const dayNames: string[] = getDayNames();\n        return bodySelect(datePickerDropdown, `DAY_NAME_${dayNames[dayName].toUpperCase()}`);\n    }\n\n    public get yearLabel(): HTMLSpanElement | null {\n        return bodySelect(datePickerDropdown, 'YEAR');\n    }\n\n    public get monthLabel(): HTMLSpanElement | null {\n        return bodySelect(datePickerDropdown, 'MONTH_NAME');\n    }\n}\n"]}