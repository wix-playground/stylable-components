{"version":3,"file":"global-event.js","sourceRoot":"","sources":["../../../../src/components/global-event/global-event.tsx"],"names":[],"mappings":";;;;;;;;;;;;AAAA,+BAAgC;AAMhC;IAAiC,+BAAgB;IAAjD;;IAyCA,CAAC;IAvCU,2CAAqB,GAA5B;QACI,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAEM,uCAAiB,GAAxB;QAAA,iBAEC;QADG,IAAI,CAAC,YAAY,CAAC,UAAC,IAAI,EAAE,QAAQ,IAAK,OAAA,KAAI,CAAC,SAAS,CAAC,IAAI,EAAE,QAAQ,CAAC,EAA9B,CAA8B,CAAC,CAAC;IAC1E,CAAC;IAEM,0CAAoB,GAA3B;QAAA,iBAEC;QADG,IAAI,CAAC,YAAY,CAAC,UAAC,IAAI,EAAE,QAAQ,IAAK,OAAA,KAAI,CAAC,WAAW,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAhC,CAAgC,CAAC,CAAC;IAC5E,CAAC;IAEM,+CAAyB,GAAhC,UAAiC,KAAY;QAA7C,iBAOC;QANG,IAAI,CAAC,YAAY,CAAC,UAAC,IAAI,EAAE,QAAQ;YAC7B,EAAE,CAAC,CAAC,QAAQ,KAAK,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC3B,KAAI,CAAC,WAAW,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;gBACjC,KAAK,CAAC,IAAI,CAAC,IAAI,KAAI,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAkB,CAAC,CAAC;YACtE,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,4BAAM,GAAb;QACI,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEO,kCAAY,GAApB,UAAqB,EAAwD;QAA7E,iBAKC;QAJI,MAAM;aACF,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;aAChB,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,KAAK,UAAU,EAAnB,CAAmB,CAAwB;aAC1D,OAAO,CAAC,UAAA,IAAI,IAAI,OAAA,EAAE,CAAC,IAAI,EAAE,KAAI,CAAC,KAAK,CAAC,IAAI,CAAkB,CAAC,EAA3C,CAA2C,CAAC,CAAC;IACtE,CAAC;IAEO,+BAAS,GAAjB,UAAkB,KAAa,EAAE,QAAuB;QACpD,MAAM,IAAI,MAAM,CAAC,gBAAgB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACvD,CAAC;IAEO,iCAAW,GAAnB,UAAoB,KAAa,EAAE,QAAuB;QACtD,MAAM,IAAI,MAAM,CAAC,mBAAmB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IAC1D,CAAC;IACL,kBAAC;AAAD,CAAC,AAzCD,CAAiC,iBAAS,GAyCzC;AAzCY,kCAAW","sourcesContent":["import {Component} from 'react';\n\nexport type Props = {\n    [EventName in keyof WindowEventMap]?: (event: WindowEventMap[EventName]) => void;\n};\n\nexport class GlobalEvent extends Component<Props> {\n\n    public shouldComponentUpdate() {\n        return false;\n    }\n\n    public componentDidMount() {\n        this.forEachEvent((name, listener) => this.subscribe(name, listener));\n    }\n\n    public componentWillUnmount() {\n        this.forEachEvent((name, listener) => this.unsubscribe(name, listener));\n    }\n\n    public componentWillReceiveProps(props: Props) {\n        this.forEachEvent((name, listener) => {\n            if (listener !== props[name]) {\n                this.unsubscribe(name, listener);\n                props[name] && this.subscribe(name, props[name] as EventListener);\n            }\n        });\n    }\n\n    public render() {\n        return null;\n    }\n\n    private forEachEvent(fn: (name: keyof Props, listener: EventListener) => void) {\n        (Object\n            .keys(this.props)\n            .filter(name => name !== 'children') as Array<keyof Props>)\n            .forEach(name => fn(name, this.props[name] as EventListener));\n    }\n\n    private subscribe(event: string, listener: EventListener) {\n        window && window.addEventListener(event, listener);\n    }\n\n    private unsubscribe(event: string, listener: EventListener) {\n        window && window.removeEventListener(event, listener);\n    }\n}\n"]}