{"version":3,"file":"time-picker.js","sourceRoot":"","sources":["../../../../src/components/time-picker/time-picker.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iCAAmC;AACnC,sCAAwC;AACxC,6BAA+B;AAC/B,mDAAyC;AAEzC,qCAAyC;AACzC,4EAAuE;AACvE,sCAA8C;AAC9C,qCAAiC;AACjC,2DAA0C;AAC1C,iCAIiB;AAuBjB,IAAM,UAAU;IACZ,GAAC,YAAI,CAAC,EAAE,IAAG,YAAI,CAAC,EAAE;IAClB,GAAC,YAAI,CAAC,EAAE,IAAG,YAAI,CAAC,EAAE;IAClB,GAAC,YAAI,CAAC,IAAI,IAAG,YAAI,CAAC,IAAI;OACzB,CAAC;AACF,IAAM,QAAQ,GAAc,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;AAEjD,8BAA8B,KAAc,EAAE,MAAe;IACzD,IAAM,MAAM,GAAG,MAAM,KAAK,MAAM,CAAC;IACjC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QACT,MAAM,CAAC;YACH,IAAI,EAAE,MAAM,GAAG,YAAI,CAAC,EAAE,GAAG,YAAI,CAAC,IAAI;SACrC,CAAC;IACN,CAAC;IACK,IAAA,iCAAyC,EAAxC,YAAI,EAAE,UAAE,CAAiC;IAC1C,IAAA,yBAAyB,EAAxB,UAAE,EAAE,cAAI,CAAiB;IAChC,MAAM,CAAC;QACH,EAAE,EAAE,uBAAe,CAAC,EAAE,CAAC;QACvB,EAAE,EAAE,uBAAe,CAAC,MAAM,GAAG,EAAE,GAAG,IAAI,CAAC;QACvC,IAAI,EAAE,MAAM,GAAG,IAAI,GAAG,YAAI,CAAC,IAAI;KAClC,CAAC;AACN,CAAC;AAGD;IAAgC,8BAA6B;IAoBzD,oBAAY,KAAY;QAAxB,YACI,iBAAO,SAUV;QAwMO,qBAAe,GAAG,UAAC,CAAuC;YAC9D,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;gBAC/B,MAAM,CAAC;YACX,CAAC;YACD,CAAC,CAAC,cAAc,EAAE,CAAC;YACnB,EAAE,CAAC,CAAC,iCAAyB,CAAC,CAAC,CAAC;gBAC5B,KAAI,CAAC,WAAY,CAAC,KAAK,EAAE,CAAC;YAC9B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,KAAI,CAAC,QAAQ,CAAC,EAAG,CAAC,KAAK,EAAE,CAAC;YAC9B,CAAC;QACL,CAAC,CAAA;QAEO,wBAAkB,GAAG,UAAC,CAAmC;YAC7D,CAAC,CAAC,cAAc,EAAE,CAAC;QACvB,CAAC,CAAA;QAEO,iBAAW,GAAG,UAAC,EAAqB;gBAApB,sBAAQ;YAAiB,OAAA,KAAI,CAAC,WAAW,CAAC,CAAC,EAAE,QAAQ,GAAG,EAAE,GAAG,CAAC,CAAC;QAAtC,CAAsC,CAAC;QAChF,mBAAa,GAAG,UAAC,EAAqB;gBAApB,sBAAQ;YAAiB,OAAA,KAAI,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,QAAQ,GAAG,EAAE,GAAG,CAAC,CAAC;QAAvC,CAAuC,CAAC;QAEnF,qBAAe,GAAG,UAAC,CAAuC;YAC9D,CAAC,CAAC,eAAe,EAAE,CAAC;YACpB,CAAC,CAAC,cAAc,EAAE,CAAC;YACnB,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACvB,KAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,aAAa,KAAK,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YACnE,CAAC;QACL,CAAC,CAAA;QAEO,iBAAW,GAAG,UAAC,CAAuC;YAC1D,KAAI,CAAC,QAAQ,CAAC,EAAC,KAAK,EAAE,IAAI,EAAE,cAAc,EAAE,MAAM,EAAC,CAAC,CAAC;QACzD,CAAC,CAAA;QAEO,sBAAgB,GAAG,UAAC,CAAyC;YACjE,CAAC,CAAC,eAAe,EAAE,CAAC;YACpB,CAAC,CAAC,cAAc,EAAE,CAAC;YACnB,CAAC,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;YACxB,CAAC,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC;QAC7B,CAAC,CAAA;QAEO,mBAAa,GAAG,UAAC,CAAyC;YACvD,IAAA,uBAAI,CAAe;YACnB,IAAA,6BAAK,CAAoB;YAChC,IAAM,IAAI,GAAG,CAAC,CAAC,aAAa,CAAC,IAAmB,CAAC;YACjD,IAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;YAC/B,EAAE,CAAC,CAAC,CAAC,oBAAY,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;gBACtC,MAAM,CAAC;YACX,CAAC;YACD,IAAM,kBAAkB,GAAG,oBAAY,CAAC,QAAQ,GAAG,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YACnE,KAAI,CAAC,QAAQ;oBACT,cAAc,EAAE,IAAI;;gBACpB,GAAC,IAAW,IAAG,kBAAkB,GAAG,KAAK,GAAG,uBAAe,CAAC,KAAK,CAAC;qBACnE;gBACC,EAAE,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;oBACtB,KAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;oBACtB,KAAI,CAAC,MAAM,EAAE,CAAC;gBAClB,CAAC;YACL,CAAC,CAAC,CAAC;;QACP,CAAC,CAAA;QAEO,yBAAmB,GAAG,UAAC,CAAyC;YACpE,KAAI,CAAC,QAAQ,CACT,oBAAoB,CAAC,CAAC,CAAC,aAAa,CAAC,KAAK,EAAE,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAC9D,KAAI,CAAC,MAAM,CACd,CAAC;QACN,CAAC,CAAA;QAEO,yBAAmB,GAAG;YAC1B,KAAI,CAAC,QAAQ,CAAC,EAAC,KAAK,EAAE,IAAI,EAAC,CAAC,CAAC;QACjC,CAAC,CAAA;QAEO,kBAAY,GAAG,UAAC,CAAyC;YACvD,IAAA,gBAAqB,EAApB,UAAE,EAAE,UAAE,CAAe;YAC5B,IAAM,KAAK,GAAG,CAAC,CAAC,aAAa,CAAC;YAC9B,IAAM,MAAM,GAA0D;gBAClE,KAAK,EAAE,IAAI;gBACX,cAAc,EAAE,CAAC,CAAC,aAAa,CAAC,IAAe;aAClD,CAAC;YACF,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;gBACb,MAAM,CAAC,EAAE,GAAG,IAAI,CAAC;gBACjB,MAAM,CAAC,EAAE,GAAG,IAAI,CAAC;YACrB,CAAC;YACD,KAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;gBAClB,KAAK,CAAC,MAAM,EAAE,CAAC;YACnB,CAAC,CAAC,CAAC;QACP,CAAC,CAAA;QACO,YAAM,GAAG,UAAC,CAAoC;YAClD,IAAM,IAAI,GAAG,CAAC,CAAC,aAAa,YAAY,gBAAgB,IAAI,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC;YACjF,IAAM,MAAM,GAA0D;gBAClE,KAAK,EAAE,KAAK;gBACZ,cAAc,EAAE,IAAI;aACvB,CAAC;YACF,EAAE,CAAC,CAAC,qBAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACtB,MAAM,CAAC,IAAI,CAAC,GAAG,uBAAe,CAAC,KAAI,CAAC,KAAK,CAAC,IAAI,CAAE,CAAC,CAAC;YACtD,CAAC;YACD,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YACtB,KAAI,CAAC,MAAM,EAAE,CAAC;QAClB,CAAC,CAAA;QAEO,eAAS,GAAG,UAAC,CAAmC;YAC7C,IAAA,2CAAc,CAAe;YACpC,IAAM,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;YAEnC,qCAAqC;YACrC,sEAAsE;YACtE,EAAE,CAAC,CACC,qBAAa,CAAC,cAAc,CAAC;gBAC7B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;gBACpB,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,OAClC,CAAC,CAAC,CAAC;gBACC,CAAC,CAAC,cAAc,EAAE,CAAC;YACvB,CAAC;YAED,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACd,KAAK,MAAM;oBACP,CAAC,CAAC,cAAc,EAAE,CAAC;oBACnB,KAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;oBACvB,KAAK,CAAC;gBACV,KAAK,OAAO;oBACR,CAAC,CAAC,cAAc,EAAE,CAAC;oBACnB,KAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;oBACtB,KAAK,CAAC;gBACV,KAAK,IAAI;oBACL,CAAC,CAAC,cAAc,EAAE,CAAC;oBACnB,KAAI,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,QAAQ,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;oBACzC,KAAK,CAAC;gBACV,KAAK,MAAM;oBACP,CAAC,CAAC,cAAc,EAAE,CAAC;oBACnB,KAAI,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,QAAQ,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;oBAC1C,KAAK,CAAC;gBACV,KAAK,SAAS;oBACV,CAAC,CAAC,cAAc,EAAE,CAAC;oBACnB,KAAI,CAAC,WAAW,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;oBACxB,KAAK,CAAC;gBACV,KAAK,WAAW;oBACZ,CAAC,CAAC,cAAc,EAAE,CAAC;oBACnB,KAAI,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;oBACzB,KAAK,CAAC;gBACV,KAAK,WAAW;oBACZ,CAAC,CAAC,cAAc,EAAE,CAAC;oBACnB,EAAE,CAAC,CAAC,qBAAa,CAAC,cAAc,CAAC,IAAI,KAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;wBAC9D,KAAI,CAAC,kBAAkB,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;oBAClD,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,KAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC3B,CAAC;oBACD,KAAK,CAAC;gBACV,KAAK,OAAO,CAAC;gBACb,KAAK,OAAO;oBACR,CAAC,CAAC,cAAc,EAAE,CAAC;oBACnB,EAAE,CAAC,CAAC,qBAAa,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;wBAChC,KAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;oBAC1B,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;oBAC1B,CAAC;oBACD,KAAK,CAAC;YACd,CAAC;QACL,CAAC,CAAA;QAEO,YAAM,GAAG;YACb,IAAM,KAAK,GAAG,KAAI,CAAC,QAAQ,EAAE,CAAC;YAC9B,KAAI,CAAC,QAAQ,CAAC;gBACV,YAAY,EAAE,KAAK;aACtB,CAAC,CAAC;YACH,EAAE,CAAC,CAAC,KAAI,CAAC,SAAS,KAAK,KAAK,CAAC,CAAC,CAAC;gBAC3B,KAAI,CAAC,SAAS,GAAG,KAAK,CAAC;gBACvB,EAAE,CAAC,CAAC,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;oBACrB,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAC,KAAK,OAAA,EAAC,CAAC,CAAC;gBAChC,CAAC;gBACD,EAAE,CAAC,CAAC,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACtB,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAC,KAAK,OAAA,EAAC,CAAC,CAAC;gBACjC,CAAC;YACL,CAAC;QACL,CAAC,CAAA;QA3XG,IAAM,MAAM,GAAG,iCAAyB,GAAG,KAAK,GAAG,KAAK,CAAC,MAAO,CAAC;QACjE,KAAI,CAAC,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC;QAC7B,KAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,KAAI,CAAC,KAAK,cACN,MAAM,QAAA,EACN,KAAK,EAAE,KAAK,EACZ,cAAc,EAAE,IAAI,IACjB,oBAAoB,CAAC,KAAK,CAAC,KAAK,EAAE,MAAM,CAAC,CAC/C,CAAC;;IACN,CAAC;IAEM,8CAAyB,GAAhC,UAAiC,KAAY,EAAE,KAAY;QAA3D,iBASC;QARG,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;YACnC,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;gBAC1D,IAAA,gBAAoC,EAAnC,gBAAK,EAAE,kCAAc,CAAe;gBAC3C,EAAE,CAAC,CAAC,CAAC,iCAAyB,IAAI,KAAK,IAAI,cAAc,CAAC,CAAC,CAAC;oBACxD,KAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;gBAChC,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC;IACL,CAAC;IAEM,2BAAM,GAAb;QAAA,iBAqGC;QApGS,IAAA,eAAwD,EAAvD,gBAAK,EAAE,UAAE,EAAE,UAAE,EAAE,cAAI,EAAE,kBAAM,EAAE,8BAAY,CAAe;QACzD,IAAA,eAAkE,EAAjE,gBAAK,EAAE,4BAAW,EAAE,sBAAQ,EAAE,gBAAK,EAAE,sBAAQ,EAAE,cAAI,CAAe;QACzE,IAAM,UAAU,GAAG,EAAE,KAAK,SAAS,IAAI,EAAE,KAAK,SAAS,CAAC;QACxD,IAAM,YAAY,GAAkB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAEjD,MAAM,CAAC,CACH,mDACuB,aAAa,iBACnB;gBACT,KAAK,OAAA;gBACL,KAAK,EAAE,KAAM;gBACb,QAAQ,EAAE,QAAS;gBACnB,KAAK,EAAE,CAAC,UAAU;gBAClB,cAAc,EAAE,CAAC,CAAC,WAAW;gBAC7B,GAAG,EAAE,oBAAY,CAAC,IAAI,CAAC,OAAO,CAAC;aAClC,EACD,WAAW,EAAE,IAAI,CAAC,eAAe;YAEhC,YAAY;gBACT,oBAAC,qDAAwB,QAAE,YAAY,CAA4B;YAEvE,6BAAK,SAAS,EAAC,MAAM,IAChB,YAAY,CAAC,GAAG,CAAC,UAAA,OAAO;gBACrB,OAAA,+BACI,GAAG,EAAE,OAAO,wBACQ,oBAAoB,GAAG,OAAO,CAAC,WAAW,EAAE,EAChE,SAAS,EAAC,OAAO,EACjB,IAAI,EAAC,MAAM,EACX,QAAQ,EAAE,iCAAyB,GAAG,CAAC,CAAC,GAAG,CAAC,EAC5C,GAAG,EAAE,UAAA,IAAI,IAAI,OAAA,KAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,IAAI,EAA7B,CAA6B,EAC1C,KAAK,EAAE,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,EAChC,WAAW,EAAE,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,IAAI,EAC5C,QAAQ,EAAE,QAAQ,EAClB,IAAI,EAAE,OAAO,EAEb,IAAI,EAAC,YAAY,gBACL,gBAAM,CAAC,OAAO,CAAC,oBACX,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAEnC,WAAW,EAAE,KAAI,CAAC,gBAAgB,EAClC,QAAQ,EAAE,KAAI,CAAC,aAAa,EAC5B,OAAO,EAAE,KAAI,CAAC,YAAY,EAC1B,MAAM,EAAE,KAAI,CAAC,MAAM,EACnB,SAAS,EAAE,KAAI,CAAC,SAAS,GAC3B;YArBF,CAqBE,CACL,CACC;YACL,MAAM,KAAK,MAAM;gBACd,mDACuB,kBAAkB,EACrC,SAAS,EAAC,MAAM,EAChB,GAAG,EAAE,UAAA,IAAI,IAAI,OAAA,KAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI,EAAzB,CAAyB,EACtC,QAAQ,EAAE,QAAQ,IAAI,iCAAyB,GAAG,CAAC,CAAC,GAAG,CAAC,EACxD,QAAQ,EAAE,kBAAU,CAAC,IAAI,CAAC,EAE1B,IAAI,EAAC,YAAY,gBACL,gBAAM,CAAC,IAAI,oBACP,kBAAU,CAAC,IAAI,CAAC,EAEhC,WAAW,EAAE,IAAI,CAAC,eAAe,EACjC,OAAO,EAAE,IAAI,CAAC,WAAW,EACzB,MAAM,EAAE,IAAI,CAAC,MAAM,EACnB,SAAS,EAAE,IAAI,CAAC,SAAS,GAC3B;YAEL,WAAW,IAAI,CAAC,UAAU;gBACvB,mDACuB,yBAAyB,EAC5C,SAAS,EAAC,aAAa,EACvB,QAAQ,EAAE,WAAW,EACrB,WAAW,EAAE,IAAI,CAAC,eAAe,GACnC;YAEL,CAAC,iCAAyB;gBACvB,6BAAK,WAAW,EAAE,IAAI,CAAC,kBAAkB;oBACrC,oBAAC,iBAAO,IACJ,SAAS,EAAC,SAAS,EACnB,IAAI,EAAE,IAAI,CAAC,WAAW,EACtB,MAAM,EAAE,IAAI,CAAC,aAAa,GAC5B,CACA;YAEV,+BAAO,SAAS,EAAC,OAAO,iBAAc,EAAC,OAAO,EAAE,iCAAyB,EAAC;gBACtE,+BACI,SAAS,EAAC,aAAa,EACvB,IAAI,EAAC,MAAM,EACX,QAAQ,EAAE,iCAAyB,GAAG,CAAC,GAAG,CAAC,CAAC,EAC5C,GAAG,EAAE,UAAA,IAAI,IAAI,OAAA,KAAI,CAAC,WAAW,GAAG,IAAI,EAAvB,CAAuB,EACpC,IAAI,EAAE,IAAI,EACV,QAAQ,EAAE,QAAQ,gBACN,KAAK,EACjB,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAE,EACtB,QAAQ,EAAE,QAAQ,EAClB,OAAO,EAAE,IAAI,CAAC,mBAAmB,EACjC,MAAM,EAAE,IAAI,CAAC,MAAM,EACnB,QAAQ,EAAE,IAAI,CAAC,mBAAmB,GACpC,CACE,CACN,CACT,CAAC;IACN,CAAC;IAEO,6BAAQ,GAAhB;QACU,IAAA,eAAmC,EAAlC,UAAM,EAAN,2BAAM,EAAE,UAAM,EAAN,2BAAM,EAAE,cAAI,CAAe;QAC1C,IAAM,QAAQ,GAAG,uBAAe,CAAC,YAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;QACzD,IAAM,QAAQ,GAAG,uBAAe,CAAC,EAAE,CAAC,CAAC;QACrC,MAAM,CAAI,QAAQ,SAAI,QAAU,CAAC;IACrC,CAAC;IAEO,2BAAM,GAAd,UAAe,OAAgB;QAC3B,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAE,CAAC;QACtC,IAAI,CAAC,QAAQ,CAAC;YACV,cAAc,EAAE,OAAO;SAC1B,EAAE;YACC,KAAK,CAAC,KAAK,EAAE,CAAC;YACd,EAAE,CAAC,CAAC,qBAAa,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBACxB,KAA0B,CAAC,MAAM,EAAE,CAAC;YACzC,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,kCAAa,GAArB,UAAsB,IAAY;QAC9B,IAAM,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,cAAe,CAAC,CAAC;QAC3D,IAAM,WAAW,GAAG,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC;QAC3C,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;YACzB,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAEO,uCAAkB,GAA1B,UAA2B,IAAa,EAAE,KAAoB;QAA9D,iBASC;QARG,IAAI,CAAC,QAAQ;YACT,GAAC,IAAW,IAAG,KAAK;iBACrB;YACC,EAAE,CAAC,CAAC,qBAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACtB,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACtB,CAAC;YACD,KAAI,CAAC,MAAM,EAAE,CAAC;QAClB,CAAC,CAAC,CAAC;;IACP,CAAC;IAEO,+BAAU,GAAlB,UAAmB,YAAqB;QACpC,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;QAC7D,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,QAAQ,CAAC,IAAK,CAAC,KAAK,EAAE,CAAC;QAChC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,QAAQ,CAAC,IAAK,CAAC,IAAI,EAAE,CAAC;QAC/B,CAAC;IACL,CAAC;IAEO,gCAAW,GAAnB,UAAoB,IAAY,EAAE,UAAsB;QAAxD,iBAiCC;QAjCiC,2BAAA,EAAA,cAAsB;QAC7C,IAAA,0CAAc,CAAe;QACpC,EAAE,CAAC,CAAC,CAAC,qBAAa,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACjC,CAAC;QAED,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;QAC3B,IAAI,EAAE,GAAG,YAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QAChD,IAAI,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;QAEpC,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;YAC1B,EAAE,IAAI,IAAI,GAAG,UAAU,CAAC;QAC5B,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,EAAE,IAAI,IAAI,CAAC;QACf,CAAC;QAED,IAAM,YAAY,GAAW,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;QAC1C,EAAE,GAAG,CAAC,YAAY,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;QAC9B,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;QAC7C,EAAE,CAAC,CAAC,IAAI,KAAK,YAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACrB,IAAM,MAAM,GAAG,cAAM,CAAC,EAAE,CAAC,CAAC;YAC1B,EAAE,GAAG,MAAM,CAAC,EAAE,CAAC;YACf,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;QACvB,CAAC;QAED,IAAI,CAAC,QAAQ,CAAC;YACV,EAAE,EAAE,uBAAe,CAAC,EAAE,CAAC;YACvB,EAAE,EAAE,uBAAe,CAAC,EAAE,CAAC;YACvB,IAAI,MAAA;SACP,EAAE;YACC,KAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;YAC5B,KAAI,CAAC,MAAM,EAAE,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IApOa,uBAAY,GAAmB;QACzC,MAAM,EAAE,sBAAc,GAAG,MAAM,GAAG,KAAK;QACvC,QAAQ,EAAE,KAAK;QACf,KAAK,EAAE,KAAK;QACZ,QAAQ,EAAE,KAAK;KAClB,CAAC;IACY,uBAAY,GAAG;QACzB,eAAe,EAAE,SAAS,CAAC,KAAK,CAAC;YAC7B,GAAG,EAAE,SAAS,CAAC,MAAM;SACxB,CAAC;KACL,CAAC;IAXO,UAAU;QADtB,0BAAQ,CAAC,4BAAM,CAAC;OACJ,UAAU,CAmZtB;IAAD,iBAAC;CAAA,AAnZD,CAAgC,KAAK,CAAC,SAAS,GAmZ9C;AAnZY,gCAAU","sourcesContent":["import * as keycode from 'keycode';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {stylable} from 'wix-react-tools';\nimport {FormInputProps} from '../../types/forms';\nimport {isRTLContext} from '../../utils';\nimport {ScreenReaderNotification} from '../screen-reader-notification';\nimport {Modifiers, Stepper} from '../stepper';\nimport {LABELS} from './strings';\nimport styles from './time-picker.st.css';\nimport {\n    Ampm, ampmLabels, Format,\n    formatTimeChunk, is12TimeFormat, isTimeSegment,\n    isTouchTimeInputSupported, isValidValue, Segment, TimeSegment, to24, toAmpm\n} from './utils';\n\nexport interface Props extends FormInputProps<string> {\n    format?: Format;\n    placeholder?: string;\n    disabled?: boolean;\n    label?: string;\n    name?: string;\n    required?: boolean;\n    error?: boolean;\n    rtl?: boolean;\n}\n\nexport interface State {\n    focus: boolean;\n    hh?: string;\n    mm?: string;\n    format: Format;\n    ampm: Ampm;\n    currentSegment: Segment;\n    notification?: string;\n}\n\nconst ampmSwitch = {\n    [Ampm.AM]: Ampm.PM,\n    [Ampm.PM]: Ampm.AM,\n    [Ampm.NONE]: Ampm.NONE\n};\nconst segments: Segment[] = ['hh', 'mm', 'ampm'];\n\nfunction propsValueToSegments(value?: string, format?: Format): {hh?: string, mm?: string, ampm: Ampm} {\n    const isAmpm = format === 'ampm';\n    if (!value) {\n        return {\n            ampm: isAmpm ? Ampm.PM : Ampm.NONE\n        };\n    }\n    const [hh24, mm] = value.split(':').map(Number);\n    const {hh, ampm} = toAmpm(hh24);\n    return {\n        mm: formatTimeChunk(mm),\n        hh: formatTimeChunk(isAmpm ? hh : hh24),\n        ampm: isAmpm ? ampm : Ampm.NONE\n    };\n}\n\n@stylable(styles)\nexport class TimePicker extends React.Component<Props, State> {\n    public static defaultProps: Partial<Props> = {\n        format: is12TimeFormat ? 'ampm' : '24h',\n        disabled: false,\n        error: false,\n        required: false\n    };\n    public static contextTypes = {\n        contextProvider: PropTypes.shape({\n            dir: PropTypes.string\n        })\n    };\n    private nativeInput: HTMLInputElement | null;\n    private segments: {\n        hh?: HTMLInputElement | null,\n        mm?: HTMLInputElement | null,\n        ampm?: HTMLDivElement | null\n    };\n    private lastValue: string | undefined;\n\n    constructor(props: Props) {\n        super();\n        const format = isTouchTimeInputSupported ? '24h' : props.format!;\n        this.lastValue = props.value;\n        this.segments = {};\n        this.state = {\n            format,\n            focus: false,\n            currentSegment: 'hh',\n            ...propsValueToSegments(props.value, format)\n        };\n    }\n\n    public componentWillReceiveProps(props: Props, state: State) {\n        if (props.value !== this.props.value) {\n            this.setState(propsValueToSegments(props.value, this.state.format), () => {\n                const {focus, currentSegment} = this.state;\n                if (!isTouchTimeInputSupported && focus && currentSegment) {\n                    this.select(currentSegment);\n                }\n            });\n        }\n    }\n\n    public render() {\n        const {focus, hh, mm, ampm, format, notification} = this.state;\n        const {label, placeholder, disabled, error, required, name} = this.props;\n        const isValueSet = hh !== undefined || mm !== undefined;\n        const timeSegments: TimeSegment[] = ['hh', 'mm'];\n\n        return (\n            <div\n                data-automation-id=\"TIME_PICKER\"\n                style-state={{\n                    focus,\n                    error: error!,\n                    disabled: disabled!,\n                    empty: !isValueSet,\n                    hasPlaceholder: !!placeholder,\n                    rtl: isRTLContext(this.context)\n                }}\n                onMouseDown={this.onRootMouseDown}\n            >\n                {notification &&\n                    <ScreenReaderNotification>{notification}</ScreenReaderNotification>\n                }\n                <div className=\"time\">\n                    {timeSegments.map(segment =>\n                        <input\n                            key={segment}\n                            data-automation-id={'TIME_PICKER_INPUT_' + segment.toUpperCase()}\n                            className=\"input\"\n                            type=\"text\"\n                            tabIndex={isTouchTimeInputSupported ? -1 : 0}\n                            ref={elem => this.segments[segment] = elem}\n                            value={this.state[segment] || ''}\n                            placeholder={this.state[segment] ? '' : '00'}\n                            disabled={disabled}\n                            name={segment}\n\n                            role=\"spinbutton\"\n                            aria-label={LABELS[segment]}\n                            aria-valuetext={this.state[segment]}\n\n                            onMouseDown={this.onInputMouseDown}\n                            onChange={this.onInputChange}\n                            onFocus={this.onInputFocus}\n                            onBlur={this.onBlur}\n                            onKeyDown={this.onKeyDown}\n                        />\n                    )}\n                </div>\n                {format === 'ampm' &&\n                    <div\n                        data-automation-id=\"TIME_PICKER_AMPM\"\n                        className=\"ampm\"\n                        ref={elem => this.segments.ampm = elem}\n                        tabIndex={disabled || isTouchTimeInputSupported ? -1 : 0}\n                        children={ampmLabels[ampm]}\n\n                        role=\"spinbutton\"\n                        aria-label={LABELS.ampm}\n                        aria-valuetext={ampmLabels[ampm]}\n\n                        onMouseDown={this.onAmpmMouseDown}\n                        onFocus={this.onAmpmFocus}\n                        onBlur={this.onBlur}\n                        onKeyDown={this.onKeyDown}\n                    />\n                }\n                {placeholder && !isValueSet &&\n                    <div\n                        data-automation-id=\"TIME_PICKER_PLACEHOLDER\"\n                        className=\"placeholder\"\n                        children={placeholder}\n                        onMouseDown={this.onRootMouseDown}\n                    />\n                }\n                {!isTouchTimeInputSupported &&\n                    <div onMouseDown={this.onStepperMouseDown}>\n                        <Stepper\n                            className=\"stepper\"\n                            onUp={this.onStepperUp}\n                            onDown={this.onStepperDown}\n                        />\n                    </div>\n                }\n                <label className=\"label\" style-state={{visible: isTouchTimeInputSupported}}>\n                    <input\n                        className=\"nativeInput\"\n                        type=\"time\"\n                        tabIndex={isTouchTimeInputSupported ? 0 : -1}\n                        ref={elem => this.nativeInput = elem}\n                        name={name}\n                        required={required}\n                        aria-label={label}\n                        value={this.getValue()}\n                        disabled={disabled}\n                        onFocus={this.onNantiveInputFocus}\n                        onBlur={this.onBlur}\n                        onChange={this.onNativeInputChange}\n                    />\n                </label>\n            </div>\n        );\n    }\n\n    private getValue(): string {\n        const {hh = 0, mm = 0, ampm} = this.state;\n        const hhString = formatTimeChunk(to24(Number(hh), ampm));\n        const mmString = formatTimeChunk(mm);\n        return `${hhString}:${mmString}`;\n    }\n\n    private select(segment: Segment): void {\n        const input = this.segments[segment]!;\n        this.setState({\n            currentSegment: segment\n        }, () => {\n            input.focus();\n            if (isTimeSegment(segment)) {\n                (input as HTMLInputElement).select();\n            }\n        });\n    }\n\n    private moveSelection(step: number): boolean {\n        const index = segments.indexOf(this.state.currentSegment!);\n        const nextSegment = segments[index + step];\n        if (this.segments[nextSegment]) {\n            this.select(nextSegment);\n            return true;\n        }\n        return false;\n    }\n\n    private updateSegmentValue(name: Segment, value: string | Ampm): void {\n        this.setState({\n            [name as any]: value\n        }, () => {\n            if (isTimeSegment(name)) {\n                this.select(name);\n            }\n            this.commit();\n        });\n    }\n\n    private toggleAmpm(shouldSelect: boolean): void {\n        this.updateSegmentValue('ampm', ampmSwitch[this.state.ampm]);\n        if (shouldSelect) {\n            this.segments.ampm!.focus();\n        } else {\n            this.segments.ampm!.blur();\n        }\n    }\n\n    private changeValue(step: number, multiplier: number = 1): void {\n        const {currentSegment} = this.state;\n        if (!isTimeSegment(currentSegment)) {\n            return this.toggleAmpm(true);\n        }\n\n        let ampm = this.state.ampm;\n        let hh = to24(Number(this.state.hh || 0), ampm);\n        let mm = Number(this.state.mm || 0);\n\n        if (currentSegment === 'mm') {\n            mm += step * multiplier;\n        } else {\n            hh += step;\n        }\n\n        const totalMinutes: number = hh * 60 + mm;\n        mm = (totalMinutes + 60) % 60;\n        hh = Math.floor(totalMinutes / 60 + 24) % 24;\n        if (ampm !== Ampm.NONE) {\n            const hhAmpm = toAmpm(hh);\n            hh = hhAmpm.hh;\n            ampm = hhAmpm.ampm;\n        }\n\n        this.setState({\n            hh: formatTimeChunk(hh),\n            mm: formatTimeChunk(mm),\n            ampm\n        }, () => {\n            this.select(currentSegment);\n            this.commit();\n        });\n    }\n\n    private onRootMouseDown = (e: React.SyntheticEvent<HTMLDivElement>) => {\n        if (e.target !== e.currentTarget) {\n            return;\n        }\n        e.preventDefault();\n        if (isTouchTimeInputSupported) {\n            this.nativeInput!.focus();\n        } else {\n            this.segments.hh!.focus();\n        }\n    }\n\n    private onStepperMouseDown = (e: React.MouseEvent<HTMLDivElement>) => {\n        e.preventDefault();\n    }\n\n    private onStepperUp = ({shiftKey}: Modifiers) => this.changeValue(1, shiftKey ? 10 : 1);\n    private onStepperDown = ({shiftKey}: Modifiers) => this.changeValue(-1, shiftKey ? 10 : 1);\n\n    private onAmpmMouseDown = (e: React.SyntheticEvent<HTMLDivElement>) => {\n        e.stopPropagation();\n        e.preventDefault();\n        if (!this.props.disabled) {\n            this.toggleAmpm(document.activeElement === this.segments.ampm);\n        }\n    }\n\n    private onAmpmFocus = (e: React.SyntheticEvent<HTMLDivElement>) => {\n        this.setState({focus: true, currentSegment: 'ampm'});\n    }\n\n    private onInputMouseDown = (e: React.SyntheticEvent<HTMLInputElement>): void => {\n        e.stopPropagation();\n        e.preventDefault();\n        e.currentTarget.focus();\n        e.currentTarget.select();\n    }\n\n    private onInputChange = (e: React.SyntheticEvent<HTMLInputElement>): void => {\n        const {ampm} = this.state;\n        const {value} = e.currentTarget;\n        const name = e.currentTarget.name as TimeSegment;\n        const numValue = Number(value);\n        if (!isValidValue(numValue, name, ampm)) {\n            return;\n        }\n        const shouldWaitForInput = isValidValue(numValue * 10, name, ampm);\n        this.setState({\n            currentSegment: name,\n            [name as any]: shouldWaitForInput ? value : formatTimeChunk(value)\n        }, () => {\n            if (!shouldWaitForInput) {\n                this.moveSelection(1);\n                this.commit();\n            }\n        });\n    }\n\n    private onNativeInputChange = (e: React.SyntheticEvent<HTMLInputElement>) => {\n        this.setState(\n            propsValueToSegments(e.currentTarget.value, this.state.format),\n            this.commit\n        );\n    }\n\n    private onNantiveInputFocus = () => {\n        this.setState({focus: true});\n    }\n\n    private onInputFocus = (e: React.SyntheticEvent<HTMLInputElement>) => {\n        const {hh, mm} = this.state;\n        const input = e.currentTarget;\n        const update: Pick<State, TimeSegment | 'focus' | 'currentSegment'> = {\n            focus: true,\n            currentSegment: e.currentTarget.name as Segment\n        };\n        if (!hh && !mm) {\n            update.hh = '12';\n            update.mm = '00';\n        }\n        this.setState(update, () => {\n            input.select();\n        });\n    }\n    private onBlur = (e: React.SyntheticEvent<HTMLElement>) => {\n        const name = e.currentTarget instanceof HTMLInputElement && e.currentTarget.name;\n        const update: Pick<State, TimeSegment | 'focus' | 'currentSegment'> = {\n            focus: false,\n            currentSegment: 'hh'\n        };\n        if (isTimeSegment(name)) {\n            update[name] = formatTimeChunk(this.state[name]!);\n        }\n        this.setState(update);\n        this.commit();\n    }\n\n    private onKeyDown = (e: React.KeyboardEvent<HTMLElement>) => {\n        const {currentSegment} = this.state;\n        const keyCode = keycode(e.keyCode);\n\n        // prevent default for and char (a-z)\n        // this is needed to disallow user to move reset select state on input\n        if (\n            isTimeSegment(currentSegment) &&\n            /^\\D$/.test(keyCode) &&\n            !e.ctrlKey && !e.altKey && !e.metaKey\n        ) {\n            e.preventDefault();\n        }\n\n        switch (keyCode) {\n            case 'left':\n                e.preventDefault();\n                this.moveSelection(-1);\n                break;\n            case 'right':\n                e.preventDefault();\n                this.moveSelection(1);\n                break;\n            case 'up':\n                e.preventDefault();\n                this.changeValue(1, e.shiftKey ? 10 : 1);\n                break;\n            case 'down':\n                e.preventDefault();\n                this.changeValue(-1, e.shiftKey ? 10 : 1);\n                break;\n            case 'page up':\n                e.preventDefault();\n                this.changeValue(1, 10);\n                break;\n            case 'page down':\n                e.preventDefault();\n                this.changeValue(-1, 10);\n                break;\n            case 'backspace':\n                e.preventDefault();\n                if (isTimeSegment(currentSegment) && this.state[currentSegment]) {\n                    this.updateSegmentValue(currentSegment, '00');\n                } else {\n                    this.moveSelection(-1);\n                }\n                break;\n            case 'space':\n            case 'enter':\n                e.preventDefault();\n                if (isTimeSegment(currentSegment)) {\n                    this.moveSelection(1);\n                } else {\n                    this.toggleAmpm(true);\n                }\n                break;\n        }\n    }\n\n    private commit = () => {\n        const value = this.getValue();\n        this.setState({\n            notification: value\n        });\n        if (this.lastValue !== value) {\n            this.lastValue = value;\n            if (this.props.onInput) {\n                this.props.onInput({value});\n            }\n            if (this.props.onChange) {\n                this.props.onChange({value});\n            }\n        }\n    }\n\n}\n"]}