{"version":3,"file":"logger.js","sourceRoot":"","sources":["../../../src/utils/logger.ts"],"names":[],"mappings":";;AAAA,mDAAgD;AAIhD,IAAM,iBAAiB,GAAG,UAAC,MAAc,IAAU,OAAA,UAAC,OAAO;IAAE,cAAO;SAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;QAAP,6BAAO;;IAChE,EAAE,CAAC,CAAC,CAAC,iCAAe,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;QAC7B,MAAM,CAAC;IACX,CAAC;IACD,IAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,IAAI,IAAK,OAAA,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,EAAvB,CAAuB,EAAE,OAAO,CAAC,CAAC;IAC9E,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;AACzC,CAAC,EANkD,CAMlD,CAAC;AACF,IAAM,IAAI,GAAG,UAAC,EAAO,EAAE,GAAgB,IAAU,OAAA,UAAC,OAAO;IAAE,cAAO;SAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;QAAP,6BAAO;;IAC9D,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACpB,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACjB,EAAE,gBAAC,OAAO,SAAK,IAAI,GAAE;IACzB,CAAC;AACL,CAAC,EALgD,CAKhD,CAAC;AAEW,QAAA,YAAY,GAAG;IACxB,IAAM,GAAG,GAAG,IAAI,GAAG,EAAE,CAAC;IACtB,IAAM,MAAM,GAER,EAAE,CAAC;IACP,MAAM,CAAC,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,MAAc;QAChD,IAAM,EAAE,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC;QACrC,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;QACjB,GAAG,CAAI,MAAM,SAAM,CAAC,GAAG,IAAI,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;QACrC,MAAM,CAAC,GAAG,CAAC;IACf,CAAC,EAAE,MAAM,CAAC,CAAC;AACf,CAAC,CAAC;AAEY,QAAA,IAAI,IAAL,KAAqC,oBAAY,EAAE,YAA5C,QAAA,KAAK,aAAE,QAAA,QAAQ,gBAAE,QAAA,SAAS,gBAAmB","sourcesContent":["import {getGlobalConfig} from 'wix-react-tools';\nexport type Log = (message: string, ...args: any[]) => void;\ntype Method = 'log' | 'warn' | 'error';\n\nconst createLogFunction = (method: Method): Log => (message, ...args) => {\n    if (!getGlobalConfig().devMode) {\n        return;\n    }\n    const formated = args.reduce((str, item) => str.replace(/%s/, item), message);\n    console[method](new Error(formated));\n};\nconst once = (fn: Log, set: Set<string>): Log => (message, ...args) => {\n    if (!set.has(message)) {\n        set.add(message);\n        fn(message, ...args);\n    }\n};\n\nexport const createLogger = () => {\n    const set = new Set();\n    const result: {\n        [key: string]: Log\n    } = {};\n    return ['warn', 'error'].reduce((obj, method: Method) => {\n        const fn = createLogFunction(method);\n        obj[method] = fn;\n        obj[`${method}Once`] = once(fn, set);\n        return obj;\n    }, result);\n};\n\nexport const {warn, error, warnOnce, errorOnce} = createLogger();\n"]}