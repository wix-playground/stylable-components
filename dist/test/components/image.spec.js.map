{"version":3,"file":"image.spec.js","sourceRoot":"","sources":["../../../test/components/image.spec.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iBAgLA;;AAhLA,6BAA+B;AAC/B,qDAAwE;AACxE,iCAAgC;AAChC,yCAAiD;AACjD,2CAA2C;AAC3C,2DAAiF;AAEjF,QAAQ,CAAC,WAAW,EAAE;IAClB,IAAM,cAAc,GAAG,IAAI,iCAAc,EAAE,CAAC;IAC5C,SAAS,CAAC,cAAM,OAAA,cAAc,CAAC,OAAO,EAAE,EAAxB,CAAwB,CAAC,CAAC;IAE1C,EAAE,CAAC,6CAA6C,EAAE;;;;;oBACxC,KAA8B,cAAc,CAAC,MAAM,CACrD,oBAAC,WAAK,OAAG,CACZ,CAAC,UAAU,CAAC,sBAAW,CAAC,EAFV,KAAK,YAAA,EAAE,UAAU,gBAAA,CAEN;oBAE1B,qBAAM,UAAU,CAAC;4BACb,yBAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC;4BAC/D,yBAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;wBAChD,CAAC,CAAC,EAAA;;oBAHF,SAGE,CAAC;;;;SACN,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE;;;;;oBAC7C,KAA8B,cAAc,CAAC,MAAM,CACrD,oBAAC,WAAK,OAAG,CACZ,CAAC,UAAU,CAAC,sBAAW,CAAC,EAFV,KAAK,YAAA,EAAE,UAAU,gBAAA,CAEN;oBAE1B,qBAAM,UAAU,CAAC,cAAM,OAAA,yBAAM,CAAC,KAAK,CAAC,MAAM,EAAE,wBAAwB,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,wBAAgB,CAAC,EAAzE,CAAyE,CAAC,EAAA;;oBAAjG,SAAiG,CAAC;;;;SACrG,CAAC,CAAC;IAEH,EAAE,CAAC,uBAAuB,EAAE;;;;;oBAClB,KAA8B,cAAc,CAAC,MAAM,CACrD,oBAAC,WAAK,IAAC,GAAG,EAAE,6BAAa,GAAI,CAChC,CAAC,UAAU,CAAC,sBAAW,CAAC,EAFV,KAAK,YAAA,EAAE,UAAU,gBAAA,CAEN;oBAE1B,qBAAM,UAAU,CAAC,cAAM,OAAA,yBAAM,CAAC,KAAK,CAAC,MAAM,EAAE,wBAAwB,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,6BAAa,CAAC,EAAtE,CAAsE,CAAC,EAAA;;oBAA9F,SAA8F,CAAC;;;;SAClG,CAAC,CAAC;IAEH,EAAE,CAAC,8CAA8C,EAAE;;;;;oBACzC,KAA8B,cAAc,CAAC,MAAM,CACrD,oBAAC,WAAK,IAAC,YAAY,EAAE,4BAAY,GAAI,CACxC,CAAC,UAAU,CAAC,sBAAW,CAAC,EAFV,KAAK,YAAA,EAAE,UAAU,gBAAA,CAEN;oBAE1B,qBAAM,UAAU,CAAC,cAAM,OAAA,yBAAM,CAAC,KAAK,CAAC,MAAM,EAAE,wBAAwB,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,4BAAY,CAAC,EAArE,CAAqE,CAAC,EAAA;;oBAA7F,SAA6F,CAAC;;;;SACjG,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE;;;;;oBAC5B,KAA8B,cAAc,CAAC,MAAM,CACrD,oBAAC,WAAK,IAAC,GAAG,EAAC,yBAAyB,GAAG,CAC1C,CAAC,UAAU,CAAC,sBAAW,CAAC,EAFV,KAAK,YAAA,EAAE,UAAU,gBAAA,CAEN;oBAE1B,qBAAM,UAAU,CAAC,cAAM,OAAA,yBAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,yBAAyB,CAAC,EAA/E,CAA+E,CAAC,EAAA;;oBAAvG,SAAuG,CAAC;;;;SAC3G,CAAC,CAAC;IAEH,EAAE,CAAC,mCAAmC,EAAE;;;;;oBAC9B,KAA8B,cAAc,CAAC,MAAM,CACrD,oBAAC,WAAK,IAAC,KAAK,EAAC,WAAW,GAAG,CAC9B,CAAC,UAAU,CAAC,sBAAW,CAAC,EAFV,KAAK,YAAA,EAAE,UAAU,gBAAA,CAEN;oBAE1B,qBAAM,UAAU,CAAC,cAAM,OAAA,yBAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,WAAW,CAAC,EAAnE,CAAmE,CAAC,EAAA;;oBAA3F,SAA2F,CAAC;;;;SAC/F,CAAC,CAAC;IAEH,EAAE,CAAC,uDAAuD,EAAE;;;;;oBAClD,KAA8B,cAAc,CAAC,MAAM,CACrD,oBAAC,WAAK,IAAC,GAAG,EAAC,EAAE,EAAC,YAAY,EAAE,6BAAa,GAAI,CAChD,CAAC,UAAU,CAAC,sBAAW,CAAC,EAFV,KAAK,YAAA,EAAE,UAAU,gBAAA,CAEN;oBAE1B,qBAAM,UAAU,CAAC,cAAM,OAAA,yBAAM,CAAC,KAAK,CAAC,MAAM,EAAE,wBAAwB,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,6BAAa,CAAC,EAAtE,CAAsE,CAAC,EAAA;;oBAA9F,SAA8F,CAAC;;;;SAClG,CAAC,CAAC;IAEH,EAAE,CAAC,sCAAsC,EAAE;;;;;oBACjC,KAAyC,cAAc,CAAC,MAAM,CAChE,oBAAC,WAAK,IAAC,GAAG,EAAE,6BAAa,GAAI,CAChC,CAAC,UAAU,CAAC,sBAAW,CAAC,EAFV,KAAK,YAAA,EAAE,UAAU,gBAAA,EAAE,SAAS,eAAA,CAEjB;oBAE1B,qBAAM,UAAU,CAAC,cAAM,OAAA,yBAAM,CAAC,KAAK,CAAC,MAAM,EAAE,wBAAwB,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,6BAAa,CAAC,EAAtE,CAAsE,CAAC,EAAA;;oBAA9F,SAA8F,CAAC;oBAE/F,cAAc,CAAC,MAAM,CAAC,oBAAC,WAAK,IAAC,GAAG,EAAE,4BAAY,GAAI,EAAE,SAAS,CAAC,CAAC;oBAE/D,qBAAM,UAAU,CAAC,cAAM,OAAA,yBAAM,CAAC,KAAK,CAAC,MAAM,EAAE,wBAAwB,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,4BAAY,CAAC,EAArE,CAAqE,CAAC,EAAA;;oBAA7F,SAA6F,CAAC;;;;SACjG,CAAC,CAAC;IAEH,EAAE,CAAC,oCAAoC,EAAE;;;;;oBAC/B,MAAM,GAAG,wBAAK,CAAC,GAAG,EAAE,CAAC;oBAC3B,cAAc,CAAC,MAAM,CAAC,oBAAC,WAAK,IAAC,GAAG,EAAE,6BAAa,EAAE,MAAM,EAAE,MAAM,GAAI,CAAC,CAAC,UAAU,CAAC,sBAAW,CAAC,CAAC;oBAE7F,qBAAM,0BAAO,CAAC,cAAM,OAAA,yBAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,EAAC,GAAG,EAAE,6BAAa,EAAC,CAAC,EAAjE,CAAiE,CAAC,EAAA;;oBAAtF,SAAsF,CAAC;;;;SAC1F,CAAC,CAAC;IAEH,EAAE,CAAC,8EAA8E,EAAE;;;;;oBACzE,OAAO,GAAG,wBAAK,CAAC,GAAG,EAAE,CAAC;oBACtB,KAA8B,cAAc,CAAC,MAAM,CACrD,oBAAC,WAAK,IAAC,GAAG,EAAE,yBAAS,EAAE,YAAY,EAAE,4BAAY,EAAE,OAAO,EAAE,OAAO,GAAI,CAC1E,CAAC,UAAU,CAAC,sBAAW,CAAC,EAFV,KAAK,YAAA,EAAE,UAAU,gBAAA,CAEN;oBAE1B,qBAAM,0BAAO,CAAC,cAAM,OAAA,yBAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,EAAC,GAAG,EAAE,yBAAS,EAAC,CAAC,EAA9D,CAA8D,CAAC,EAAA;;oBAAnF,SAAmF,CAAC;oBACpF,qBAAM,UAAU,CAAC,cAAM,OAAA,yBAAM,CAAC,KAAK,CAAC,MAAM,EAAE,wBAAwB,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,4BAAY,CAAC,EAArE,CAAqE,CAAC,EAAA;;oBAA7F,SAA6F,CAAC;;;;SACjG,CAAC,CAAC;IAEH,EAAE,CAAC,wFAAwF,EAAE;;;;;oBACnF,OAAO,GAAG,wBAAK,CAAC,GAAG,EAAE,CAAC;oBACtB,KAA8B,cAAc,CAAC,MAAM,CACrD,oBAAC,WAAK,IAAC,YAAY,EAAE,yBAAS,EAAE,OAAO,EAAE,OAAO,GAAI,CACvD,CAAC,UAAU,CAAC,sBAAW,CAAC,EAFV,KAAK,YAAA,EAAE,UAAU,gBAAA,CAEN;oBAE1B,qBAAM,0BAAO,CAAC,cAAM,OAAA,yBAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,EAAC,GAAG,EAAE,yBAAS,EAAC,CAAC,EAA9D,CAA8D,CAAC,EAAA;;oBAAnF,SAAmF,CAAC;oBACpF,qBAAM,UAAU,CAAC,cAAM,OAAA,yBAAM,CAAC,KAAK,CAAC,MAAM,EAAE,wBAAwB,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,wBAAgB,CAAC,EAAzE,CAAyE,CAAC,EAAA;;oBAAjG,SAAiG,CAAC;;;;SACrG,CAAC,CAAC;IAEH,QAAQ,CAAC,aAAa,EAAE;QACpB,EAAE,CAAC,wEAAwE,EAAE;;;;;wBACnE,KAAyC,cAAc,CAAC,MAAM,CAChE,oBAAC,WAAK,IAAC,UAAU,EAAC,SAAS,EAAC,GAAG,EAAE,6BAAa,GAAI,CACrD,CAAC,UAAU,CAAC,sBAAW,CAAC,EAFV,KAAK,YAAA,EAAE,UAAU,gBAAA,EAAE,SAAS,eAAA,CAEjB;wBAE1B,qBAAM,UAAU,CAAC;gCACb,yBAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;gCAC5C,yBAAM,CAAC,KAAK,CAAC,MAAM,EAAE,wBAAwB,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,6BAAa,CAAC,CAAC;gCACvE,yBAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;gCAC7D,yBAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;gCACzD,yBAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;gCACzD,yBAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;gCAEhD,IAAA,iDAA4B,CAAwB;gCAC3D,yBAAM,CAAC,aAAa,EAAE,oCAAoC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;gCACpF,yBAAM,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,sBAAsB,EAAE,SAAS,CAAC,CAAC;gCACjF,yBAAM,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,wBAAwB,EAAE,WAAW,CAAC,CAAC;gCAErF,qGAAqG;gCACrG,qGAAqG;gCAErG,6EAA6E;gCAC7E,uFAAuF;4BAC3F,CAAC,CAAC,EAAA;;wBAlBF,SAkBE,CAAC;;;;aACN,CAAC,CAAC;QAEH,EAAE,CAAC,oEAAoE,EAAE;;;;;wBAC/D,KAAyC,cAAc,CAAC,MAAM,CAChE,oBAAC,WAAK,IAAC,UAAU,EAAC,OAAO,EAAC,GAAG,EAAE,6BAAa,GAAI,CACnD,CAAC,UAAU,CAAC,sBAAW,CAAC,EAFV,KAAK,YAAA,EAAE,UAAU,gBAAA,EAAE,SAAS,eAAA,CAEjB;wBAE1B,qBAAM,UAAU,CAAC;gCACb,yBAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;gCAC5C,yBAAM,CAAC,KAAK,CAAC,MAAM,EAAE,wBAAwB,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,6BAAa,CAAC,CAAC;gCACvE,yBAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;gCAC7D,yBAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;gCACzD,yBAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;gCACzD,yBAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;gCAEhD,IAAA,iDAA4B,CAAwB;gCAC3D,yBAAM,CAAC,aAAa,EAAE,oCAAoC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;gCACpF,yBAAM,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,sBAAsB,EAAE,OAAO,CAAC,CAAC;gCAC/E,yBAAM,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,wBAAwB,EAAE,WAAW,CAAC,CAAC;gCAErF,qGAAqG;gCACrG,qGAAqG;gCAErG,6EAA6E;gCAC7E,uFAAuF;4BAC3F,CAAC,CAAC,EAAA;;wBAlBF,SAkBE,CAAC;;;;aACN,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE;;;;;wBACtC,KAAyC,cAAc,CAAC,MAAM,CAChE,oBAAC,WAAK,IAAC,UAAU,EAAC,MAAM,EAAC,GAAG,EAAE,6BAAa,GAAI,CAClD,CAAC,UAAU,CAAC,sBAAW,CAAC,EAFV,KAAK,YAAA,EAAE,UAAU,gBAAA,EAAE,SAAS,eAAA,CAEjB;wBAE1B,qBAAM,UAAU,CAAC;gCACb,yBAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;gCAC5C,yBAAM,CAAC,KAAK,CAAC,MAAM,EAAE,wBAAwB,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,6BAAa,CAAC,CAAC;gCACvE,yBAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;gCACjE,yBAAM,CAAC,KAAK,CAAC,aAAa,CAAC,aAAa,EAAE,6BAA6B,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;4BACjG,CAAC,CAAC,EAAA;;wBALF,SAKE,CAAC;;;;aACN,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport {ClientRenderer, expect, sinon, waitFor} from 'test-drive-react';\nimport {Image} from '../../src';\nimport {transparentImage} from '../../src/utils';\nimport {ImageDriver} from '../../test-kit';\nimport {brokenSrc, onePixelBlack, onePixelBlue} from '../fixtures/sample-images';\n\ndescribe('<Image />', () => {\n    const clientRenderer = new ClientRenderer();\n    afterEach(() => clientRenderer.cleanup());\n\n    it('outputs a visible html image element to dom', async () => {\n        const {driver: image, waitForDom} = clientRenderer.render(\n            <Image />\n        ).withDriver(ImageDriver);\n\n        await waitForDom(() => {\n            expect(image.nativeElement).to.be.instanceOf(HTMLImageElement);\n            expect(image.nativeElement).to.be.present();\n        });\n    });\n\n    it('uses one pixel transparent gif as default source', async () => {\n        const {driver: image, waitForDom} = clientRenderer.render(\n            <Image />\n        ).withDriver(ImageDriver);\n\n        await waitForDom(() => expect(image.source, 'incorrect image source').to.equal(transparentImage));\n    });\n\n    it('sets the provided src', async () => {\n        const {driver: image, waitForDom} = clientRenderer.render(\n            <Image src={onePixelBlack} />\n        ).withDriver(ImageDriver);\n\n        await waitForDom(() => expect(image.source, 'incorrect image source').to.equal(onePixelBlack));\n    });\n\n    it('uses provided defaultImage as default source', async () => {\n        const {driver: image, waitForDom} = clientRenderer.render(\n            <Image defaultImage={onePixelBlue} />\n        ).withDriver(ImageDriver);\n\n        await waitForDom(() => expect(image.source, 'incorrect image source').to.equal(onePixelBlue));\n    });\n\n    it('sets the provided alt attribute', async () => {\n        const {driver: image, waitForDom} = clientRenderer.render(\n            <Image alt=\"Calvin Cordozar Broadus\" />\n        ).withDriver(ImageDriver);\n\n        await waitForDom(() => expect(image.nativeElement).to.have.attribute('alt', 'Calvin Cordozar Broadus'));\n    });\n\n    it('sets the provided title attribute', async () => {\n        const {driver: image, waitForDom} = clientRenderer.render(\n            <Image title=\"Daredevil\" />\n        ).withDriver(ImageDriver);\n\n        await waitForDom(() => expect(image.nativeElement).to.have.attribute('title', 'Daredevil'));\n    });\n\n    it('uses default image if provided src is an empty string', async () => {\n        const {driver: image, waitForDom} = clientRenderer.render(\n            <Image src=\"\" defaultImage={onePixelBlack} />\n        ).withDriver(ImageDriver);\n\n        await waitForDom(() => expect(image.source, 'incorrect image source').to.equal(onePixelBlack));\n    });\n\n    it('updates src if a new one is provided', async () => {\n        const {driver: image, waitForDom, container} = clientRenderer.render(\n            <Image src={onePixelBlack} />\n        ).withDriver(ImageDriver);\n\n        await waitForDom(() => expect(image.source, 'incorrect image source').to.equal(onePixelBlack));\n\n        clientRenderer.render(<Image src={onePixelBlue} />, container);\n\n        await waitForDom(() => expect(image.source, 'incorrect image source').to.equal(onePixelBlue));\n    });\n\n    it('calls onLoad when image has loaded', async () => {\n        const onLoad = sinon.spy();\n        clientRenderer.render(<Image src={onePixelBlack} onLoad={onLoad} />).withDriver(ImageDriver);\n\n        await waitFor(() => expect(onLoad).to.have.been.calledWithMatch({src: onePixelBlack}));\n    });\n\n    it('calls onError when it cannot load a source, and falls back to default source', async () => {\n        const onError = sinon.spy();\n        const {driver: image, waitForDom} = clientRenderer.render(\n            <Image src={brokenSrc} defaultImage={onePixelBlue} onError={onError} />\n        ).withDriver(ImageDriver);\n\n        await waitFor(() => expect(onError).to.have.been.calledWithMatch({src: brokenSrc}));\n        await waitForDom(() => expect(image.source, 'incorrect image source').to.equal(onePixelBlue));\n    });\n\n    it('calls onError when cannot load the default image, and falls back to `transparentImage`', async () => {\n        const onError = sinon.spy();\n        const {driver: image, waitForDom} = clientRenderer.render(\n            <Image defaultImage={brokenSrc} onError={onError} />\n        ).withDriver(ImageDriver);\n\n        await waitFor(() => expect(onError).to.have.been.calledWithMatch({src: brokenSrc}));\n        await waitForDom(() => expect(image.source, 'incorrect image source').to.equal(transparentImage));\n    });\n\n    describe('resize mode', () => {\n        it('sets image as background with size: contain, when resizeMode=\"contain\"', async () => {\n            const {driver: image, waitForDom, container} = clientRenderer.render(\n                <Image resizeMode=\"contain\" src={onePixelBlack} />\n            ).withDriver(ImageDriver);\n\n            await waitForDom(() => {\n                expect(image.nativeElement).to.be.present();\n                expect(image.source, 'incorrect image source').to.equal(onePixelBlack);\n                expect(image.style).to.have.property('visibility', 'hidden');\n                expect(image.style).to.have.property('display', 'block');\n                expect(image.style).to.have.property('maxWidth', '100%');\n                expect(image.style).to.have.property('height', '100%');\n\n                const {parentElement: sizingWrapper} = image.nativeElement;\n                expect(sizingWrapper, 'verify image is wrapped for sizing').to.not.equal(container);\n                expect(sizingWrapper).to.have.nested.property('style.backgroundSize', 'contain');\n                expect(sizingWrapper).to.have.nested.property('style.backgroundRepeat', 'no-repeat');\n\n                // chrome normalizes to url(\"http://domain/file\"), while safari normalizes to url(http://domain/file)\n                // expect(sizingWrapper).to.have.nested.property('style.backgroundImage', `url(\"${onePixelBlack}\")`);\n\n                // ie11 normalizes to 'center', while chrome 60 normalizes to 'center center'\n                // expect(sizingWrapper).to.have.nested.property('style.backgroundPosition', 'center');\n            });\n        });\n\n        it('sets image as background with size: cover, when resizeMode=\"cover\"', async () => {\n            const {driver: image, waitForDom, container} = clientRenderer.render(\n                <Image resizeMode=\"cover\" src={onePixelBlack} />\n            ).withDriver(ImageDriver);\n\n            await waitForDom(() => {\n                expect(image.nativeElement).to.be.present();\n                expect(image.source, 'incorrect image source').to.equal(onePixelBlack);\n                expect(image.style).to.have.property('visibility', 'hidden');\n                expect(image.style).to.have.property('display', 'block');\n                expect(image.style).to.have.property('maxWidth', '100%');\n                expect(image.style).to.have.property('height', '100%');\n\n                const {parentElement: sizingWrapper} = image.nativeElement;\n                expect(sizingWrapper, 'verify image is wrapped for sizing').to.not.equal(container);\n                expect(sizingWrapper).to.have.nested.property('style.backgroundSize', 'cover');\n                expect(sizingWrapper).to.have.nested.property('style.backgroundRepeat', 'no-repeat');\n\n                // chrome normalizes to url(\"http://domain/file\"), while safari normalizes to url(http://domain/file)\n                // expect(sizingWrapper).to.have.nested.property('style.backgroundImage', `url(\"${onePixelBlack}\")`);\n\n                // ie11 normalizes to 'center', while chrome 60 normalizes to 'center center'\n                // expect(sizingWrapper).to.have.nested.property('style.backgroundPosition', 'center');\n            });\n        });\n\n        it('leaves image as-is when resizeMode=\"fill\"', async () => {\n            const {driver: image, waitForDom, container} = clientRenderer.render(\n                <Image resizeMode=\"fill\" src={onePixelBlack} />\n            ).withDriver(ImageDriver);\n\n            await waitForDom(() => {\n                expect(image.nativeElement).to.be.present();\n                expect(image.source, 'incorrect image source').to.equal(onePixelBlack);\n                expect(image.style).to.not.have.property('visibility', 'hidden');\n                expect(image.nativeElement.parentElement, 'verify image is not wrapped').to.equal(container);\n            });\n        });\n    });\n});\n"]}