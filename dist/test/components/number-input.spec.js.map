{"version":3,"file":"number-input.spec.js","sourceRoot":"","sources":["../../../test/components/number-input.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {ClientRenderer, expect, sinon} from 'test-drive-react';\nimport {NumberInput} from '../../src';\nimport {\n    NumberInputDriver,\n    StatefulUncontrolledNumberInput,\n    StatefulUnctontrolledNumberInputDriver\n} from '../../test-kit';\n\nfunction assertCommit(\n    input: Element | null,\n    onChange: sinon.SinonSpy,\n    expectedValue: number | undefined\n): void {\n    expect(onChange).to.have.been.calledOnce;\n    expect(onChange.lastCall.args[0]).to.deep.eq({value: expectedValue});\n    expect(input).to.have.value(String(expectedValue));\n}\n\ndescribe('<NumberInput />', () => {\n    const clientRenderer = new ClientRenderer();\n    afterEach(() => clientRenderer.cleanup());\n\n    it('should output an input form element with type=\"number\" by default', async () => {\n        const value = 0;\n        const min = -5;\n        const max = 5;\n        const step = 2;\n        const name = 'input-name';\n        const {driver, waitForDom} = clientRenderer.render(\n            <NumberInput\n                value={value}\n                min={min}\n                max={max}\n                step={step}\n                name={name}\n                required\n            />\n        ).withDriver(NumberInputDriver);\n\n        await waitForDom(() => {\n            const numberInput = driver.nativeInput;\n\n            expect(numberInput).to.be.present();\n            expect(numberInput).to.have.property('tagName', 'INPUT');\n\n            expect(numberInput).to.have.attribute('type', 'number');\n            expect(numberInput).to.have.attribute('min', String(min));\n            expect(numberInput).to.have.attribute('max', String(max));\n            expect(numberInput).to.have.attribute('step', String(step));\n            expect(numberInput).to.have.attribute('name', String(name));\n            expect(numberInput).to.have.attribute('required');\n\n            expect(numberInput).to.have.value(String(value));\n\n        });\n    });\n\n    it('should only set appropriate attributes on native input', async () => {\n        const value = 0;\n        const {driver, waitForDom} = clientRenderer.render(\n            <NumberInput value={value} />\n        ).withDriver(NumberInputDriver);\n\n        await waitForDom(() => {\n            const numberInput = driver.nativeInput;\n\n            expect(numberInput).to.be.present();\n            expect(numberInput).to.have.property('tagName', 'INPUT');\n\n            expect(numberInput).to.have.attribute('type', 'number');\n            expect(numberInput).not.to.have.attribute('min');\n            expect(numberInput).not.to.have.attribute('max');\n            expect(numberInput).not.to.have.attribute('step');\n            expect(numberInput).not.to.have.attribute('name');\n            expect(numberInput).not.to.have.attribute('required');\n\n            expect(numberInput).to.have.value(String(value));\n        });\n    });\n\n    it('can be disabled', async () => {\n        const value = 0;\n        const {driver, waitForDom} = clientRenderer.render(\n            <NumberInput\n                value={value}\n                disabled\n            />\n        ).withDriver(NumberInputDriver);\n\n        await waitForDom(() => {\n            const numberInput = driver.nativeInput;\n            const increment = driver.increment;\n            const decrement = driver.decrement;\n\n            expect(numberInput).to.have.attribute('disabled');\n            expect(increment).to.have.attribute('disabled');\n            expect(decrement).to.have.attribute('disabled');\n        });\n    });\n\n    it('should render a stepper', async () => {\n        const {driver, waitForDom} = clientRenderer.render(\n            <NumberInput value={0} />\n        ).withDriver(NumberInputDriver);\n\n        await waitForDom(() => {\n            const stepper = driver.stepper;\n\n            expect(stepper).to.be.present();\n        });\n    });\n\n    describe('<Stepper />', () => {\n        it('should render increment and decrement controls', async () => {\n            const {driver, waitForDom} = clientRenderer.render(\n                <NumberInput value={0} />\n            ).withDriver(NumberInputDriver);\n\n            await waitForDom(() => {\n                const increment = driver.increment;\n                const decrement = driver.decrement;\n\n                expect(increment).to.be.present();\n                expect(decrement).to.be.present();\n            });\n        });\n\n        describe('increment', () => {\n\n            it('should increase the value by one step', async () => {\n                const value = 0;\n                const step = 2;\n                const onChange = sinon.spy();\n                const {driver, waitForDom} = clientRenderer.render(\n                    <NumberInput value={value} step={step} onChange={onChange} />\n                ).withDriver(NumberInputDriver);\n\n                await waitForDom(() => {\n                    driver.clickIncrement();\n\n                    assertCommit(driver.nativeInput, onChange, value + step);\n                });\n            });\n\n            it('should increase the value by a large step when shift key is held', async () => {\n                const value = 0;\n                const step = 2;\n                const onChange = sinon.spy();\n                const {driver, waitForDom} = clientRenderer.render(\n                    <NumberInput value={value} step={step} onChange={onChange} />\n                ).withDriver(NumberInputDriver);\n\n                await waitForDom(() => {\n                    driver.clickIncrement({shiftKey: true});\n\n                    assertCommit(driver.nativeInput, onChange, value + 10 * step);\n                });\n            });\n\n            it('should be disabled when value >= max', async () => {\n                const value = 2;\n                const max = 2;\n                const {driver, waitForDom} = clientRenderer.render(\n                    <NumberInput value={value} max={max} />\n                ).withDriver(NumberInputDriver);\n\n                await waitForDom(() =>\n                    expect(driver.increment).to.have.attribute('disabled')\n                );\n            });\n\n            it('should set the value to min when value < min', async () => {\n                const value = -3;\n                const min = 0;\n                const onChange = sinon.spy();\n                const {driver, waitForDom} = clientRenderer.render(\n                    <NumberInput value={value} min={min} onChange={onChange} />\n                ).withDriver(NumberInputDriver);\n\n                await waitForDom(() => {\n                    driver.clickIncrement();\n\n                    assertCommit(driver.nativeInput, onChange, min);\n                });\n            });\n        });\n\n        describe('decrement', () => {\n            it('should decrease the value by one step', async () => {\n                const value = 0;\n                const step = 2;\n                const onChange = sinon.spy();\n                const {driver, waitForDom} = clientRenderer.render(\n                    <NumberInput value={value} step={step} onChange={onChange} />\n                ).withDriver(NumberInputDriver);\n\n                await waitForDom(() => {\n                    driver.clickDecrement();\n\n                    assertCommit(driver.nativeInput, onChange, value - step);\n                });\n            });\n\n            it('should decrease the value by a large step when shift key is held', async () => {\n                const value = 0;\n                const step = 2;\n                const onChange = sinon.spy();\n                const {driver, waitForDom} = clientRenderer.render(\n                    <NumberInput value={value} step={step} onChange={onChange} />\n                ).withDriver(NumberInputDriver);\n\n                await waitForDom(() => {\n                    driver.clickDecrement({shiftKey: true});\n\n                    assertCommit(driver.nativeInput, onChange, value - 10 * step);\n                });\n            });\n\n            it('should be disabled when value <= min', async () => {\n                const value = -1;\n                const min = 0;\n                const {driver, waitForDom} = clientRenderer.render(\n                    <NumberInput value={value} min={min} />\n                ).withDriver(NumberInputDriver);\n\n                await waitForDom(() =>\n                    expect(driver.decrement).to.have.attribute('disabled')\n                );\n            });\n\n            it('should set the value to max when value > max', async () => {\n                const value = 3;\n                const max = 0;\n                const onChange = sinon.spy();\n                const {driver, waitForDom} = clientRenderer.render(\n                    <NumberInput value={value} max={max} onChange={onChange} />\n                ).withDriver(NumberInputDriver);\n\n                await waitForDom(() => {\n                    driver.clickDecrement();\n\n                    assertCommit(driver.nativeInput, onChange, max);\n                });\n            });\n\n        });\n    });\n\n    describe('keyboard interactions', () => {\n        describe('up key', () => {\n            it('should increase value by one step', async () => {\n                const value = 0;\n                const step = 2;\n                const onChange = sinon.spy();\n                const {driver, waitForDom} = clientRenderer.render(\n                    <NumberInput value={value} step={step} onChange={onChange} />\n                ).withDriver(NumberInputDriver);\n\n                await waitForDom(() => {\n                    driver.pressUpKey();\n\n                    assertCommit(driver.nativeInput, onChange, value + step);\n                });\n            });\n\n            it('should increase value by 10*step with shift key', async () => {\n                const value = 0;\n                const step = 2;\n                const onChange = sinon.spy();\n                const {driver, waitForDom} = clientRenderer.render(\n                    <NumberInput value={value} step={step} onChange={onChange} />\n                ).withDriver(NumberInputDriver);\n\n                await waitForDom(() => {\n                    driver.pressUpKey({shiftKey: true});\n\n                    assertCommit(driver.nativeInput, onChange, value + 10 * step);\n                });\n            });\n\n            it('should set value to max when value > max', async () => {\n                const value = 1;\n                const max = 0;\n                const onChange = sinon.spy();\n                const {driver, waitForDom} = clientRenderer.render(\n                    <NumberInput value={value} max={max} onChange={onChange} />\n                ).withDriver(NumberInputDriver);\n\n                await waitForDom(() => {\n                    driver.pressUpKey();\n\n                    assertCommit(driver.nativeInput, onChange, max);\n                });\n            });\n\n            it('should set value to min when value < min', async () => {\n                const value = 0;\n                const min = 1;\n                const onChange = sinon.spy();\n                const {driver, waitForDom} = clientRenderer.render(\n                    <NumberInput value={value} min={min} onChange={onChange} />\n                ).withDriver(NumberInputDriver);\n\n                await waitForDom(() => {\n                    driver.pressUpKey();\n                    assertCommit(driver.nativeInput, onChange, min);\n                });\n            });\n\n            it('should not call onChange when value = max', async () => {\n                const value = 0;\n                const max = 0;\n                const onChange = sinon.spy();\n                const {driver, waitForDom} = clientRenderer.render(\n                    <NumberInput value={value} max={max} onChange={onChange} />\n                ).withDriver(NumberInputDriver);\n\n                await waitForDom(() => {\n                    driver.pressUpKey();\n\n                    expect(onChange).not.to.have.been.called;\n                    expect(driver.nativeInput).to.have.value(String(value));\n                });\n            });\n\n        });\n\n        describe('down key', () => {\n            it('should decrease value by one step', async () => {\n                const value = 0;\n                const step = 2;\n                const onChange = sinon.spy();\n                const {driver, waitForDom} = clientRenderer.render(\n                    <NumberInput value={value} step={step} onChange={onChange} />\n                ).withDriver(NumberInputDriver);\n\n                await waitForDom(() => {\n                    driver.pressDownKey();\n                    assertCommit(driver.nativeInput, onChange, value - step);\n                });\n            });\n\n            it('should decrease value by 10*step with shift key', async () => {\n                const value = 0;\n                const step = 2;\n                const onChange = sinon.spy();\n                const {driver, waitForDom} = clientRenderer.render(\n                    <NumberInput value={value} step={step} onChange={onChange} />\n                ).withDriver(NumberInputDriver);\n\n                await waitForDom(() => {\n                    driver.pressDownKey({shiftKey: true});\n                    assertCommit(driver.nativeInput, onChange, value - 10 * step);\n                });\n            });\n\n            it('should set value to max when value > max', async () => {\n                const value = 1;\n                const max = 0;\n                const onChange = sinon.spy();\n                const {driver, waitForDom} = clientRenderer.render(\n                    <NumberInput value={value} max={max} onChange={onChange} />\n                ).withDriver(NumberInputDriver);\n\n                await waitForDom(() => {\n                    driver.pressDownKey();\n                    assertCommit(driver.nativeInput, onChange, max);\n                });\n            });\n\n            it('should set value to min when value < min', async () => {\n                const value = 0;\n                const min = 1;\n                const onChange = sinon.spy();\n                const {driver, waitForDom} = clientRenderer.render(\n                    <NumberInput value={value} min={min} onChange={onChange} />\n                ).withDriver(NumberInputDriver);\n\n                await waitForDom(() => {\n                    driver.pressDownKey();\n                    assertCommit(driver.nativeInput, onChange, min);\n                });\n            });\n\n            it('should not call onChange when value = min', async () => {\n                const value = 0;\n                const min = 0;\n                const onChange = sinon.spy();\n                const {driver, waitForDom} = clientRenderer.render(\n                    <NumberInput value={value} min={min} onChange={onChange} />\n                ).withDriver(NumberInputDriver);\n\n                await waitForDom(() => {\n                    driver.pressDownKey();\n                    expect(onChange).not.to.have.been.called;\n                    expect(driver.nativeInput).to.have.value(String(value));\n                });\n            });\n\n        });\n\n        describe('value being typed', () => {\n\n            it('should call onInput on every keystroke', async () => {\n                const onInput = sinon.spy();\n                const {driver, waitForDom} = clientRenderer.render(\n                    <NumberInput onInput={onInput} />\n                ).withDriver(NumberInputDriver);\n\n                await waitForDom(() => {\n                    driver.typeIn('1');\n                    driver.typeIn('2');\n                    driver.typeIn('3');\n                    expect(onInput).to.have.been.calledThrice;\n                    expect(onInput).to.have.been.calledWith({value: '123'});\n                    expect(driver.nativeInput).to.have.value('123');\n                });\n            });\n\n            it('should not commit and validate the value', async () => {\n                const onChange = sinon.spy();\n                const {driver, waitForDom} = clientRenderer.render(\n                    <NumberInput max={10} onChange={onChange} />\n                ).withDriver(NumberInputDriver);\n\n                await waitForDom(() => {\n                    driver.typeIn('123');\n                    expect(onChange).not.to.have.been.called;\n                    expect(driver.nativeInput).to.have.value('123');\n                });\n            });\n\n            describe('enter', () => {\n                it('should commit the entered value', async () => {\n                    const onChange = sinon.spy();\n                    const {driver, waitForDom} = clientRenderer.render(\n                        <NumberInput onChange={onChange} />\n                    ).withDriver(NumberInputDriver);\n\n                    await waitForDom(() => {\n                        driver.typeIn('123');\n\n                        driver.pressEnter();\n\n                        assertCommit(driver.nativeInput, onChange, 123);\n                    });\n                });\n                it('should not commit already committed value', async () => {\n                    const onChange = sinon.spy();\n                    const {driver, waitForDom} = clientRenderer.render(\n                        <NumberInput onChange={onChange} />\n                    ).withDriver(NumberInputDriver);\n\n                    await waitForDom(() => {\n                        driver.typeIn('123');\n\n                        driver.pressEnter();\n                        driver.pressEnter();\n\n                        assertCommit(driver.nativeInput, onChange, 123);\n                    });\n                });\n            });\n\n            describe('focus', () => {\n                it('should commit on blur', async () => {\n                    const onChange = sinon.spy();\n                    const {driver, waitForDom} = clientRenderer.render(\n                        <NumberInput onChange={onChange} />\n                    ).withDriver(NumberInputDriver);\n\n                    await waitForDom(() => {\n                        driver.typeIn('123');\n\n                        driver.blur();\n\n                        assertCommit(driver.nativeInput, onChange, 123);\n                    });\n                });\n            });\n\n            describe('esc', () => {\n                it('should discard uncommitted changes', async () => {\n                    const initialValue = 3;\n                    const onChange = sinon.spy();\n                    const {driver, waitForDom} = clientRenderer.render(\n                        <NumberInput value={initialValue} onChange={onChange} />\n                    ).withDriver(NumberInputDriver);\n\n                    await waitForDom(() => {\n                        driver.typeIn('123');\n\n                        driver.pressEsc();\n\n                        expect(onChange).not.to.have.been.called;\n                        expect(driver.nativeInput).to.have.value(String(initialValue));\n                    });\n                });\n            });\n        });\n    });\n\n    describe('children', () => {\n        it('should render an elements provided by prefix suffix props', async () => {\n            const {driver, waitForDom} = clientRenderer.render(\n                <NumberInput\n                    prefix={<span data-slot=\"prefix\" data-automation-id=\"PREFIX\">prefix</span>}\n                    suffix={<span data-slot=\"suffix\" data-automation-id=\"SUFFIX\">suffix</span>}\n                />\n            ).withDriver(NumberInputDriver);\n\n            await waitForDom(() => {\n                expect(driver.prefix).to.be.present();\n                expect(driver.suffix).to.be.present();\n            });\n        });\n    });\n\n    describe('uncontrolled input', () => {\n\n        describe('defaultValue prop', () => {\n\n            it('should set the value of input', async () => {\n                const value = 11;\n                const {driver, waitForDom} = clientRenderer.render(\n                    <NumberInput defaultValue={value} />\n                ).withDriver(NumberInputDriver);\n\n                await waitForDom(() =>\n                    expect(driver.nativeInput).to.have.value(String(value))\n                );\n            });\n\n            it('should only set the value of the input once', async () => {\n                const initialValue = 11;\n\n                const {driver, waitForDom} = clientRenderer.render(\n                    <StatefulUncontrolledNumberInput initialValue={initialValue} />\n                ).withDriver(StatefulUnctontrolledNumberInputDriver);\n\n                await waitForDom(() => {\n                    const numberInput = driver.input;\n\n                    driver.click();\n                    driver.click();\n                    driver.click();\n\n                    expect(numberInput).to.have.value(String(initialValue));\n                });\n            });\n\n        });\n\n        describe('treating DOM as the source of truth', () => {\n\n            it('should allow the user to enter values', async () => {\n                const initialValue = 1;\n                const {driver, waitForDom} = clientRenderer.render(\n                    <NumberInput defaultValue={initialValue} />\n                ).withDriver(NumberInputDriver);\n\n                await waitForDom(() => {\n                    driver.typeIn('23');\n                    expect(driver.nativeInput).to.have.value(String(123));\n                });\n            });\n\n            it('should be controlled by stepper correctly', async () => {\n                const initialValue = 1;\n                const newValue = 3;\n                const {driver, waitForDom} = clientRenderer.render(\n                    <NumberInput defaultValue={initialValue} />\n                ).withDriver(NumberInputDriver);\n\n                await waitForDom(() => {\n                    (driver.nativeInput as HTMLInputElement).value = String(newValue);\n\n                    driver.clickIncrement();\n\n                    expect(driver.nativeInput).to.have.value(String(newValue + 1));\n                });\n            });\n\n        });\n\n    });\n});\n"]}