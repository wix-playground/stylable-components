{"version":3,"file":"tree-view.spec.js","sourceRoot":"","sources":["../../../test/components/tree-view.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import {observable} from 'mobx';\nimport * as React from 'react';\nimport {ClientRenderer, expect, simulate, sinon, waitFor} from 'test-drive-react';\nimport {TreeViewDemo, TreeViewDemoCustom} from '../../demo/components/tree-view-demo';\nimport {TreeItem, TreeKeyCodes, TreeView} from '../../src';\nimport {getLastAvailableItem, getNextItem, getPreviousItem} from '../../src/components/tree-view/tree-util';\nimport {initParentsMap, TreeItemData,\n        TreeViewParentsMap, TreeViewStateMap} from '../../src/components/tree-view/tree-view';\nimport {elementHasStylableState} from '../../test-kit/utils';\n\n// this can be removed once encapsulated in the driver\nimport {Stylesheet} from 'stylable';\nimport treeViewDemoStyle from '../../demo/components/tree-view-demo.st.css';\nimport treeItemStyle from '../../src/components/tree-view/tree-item.st.css';\n\nconst treeView = 'TREE_VIEW';\nconst treeItem = 'TREE_ITEM';\n\nconst treeData: TreeItemData[] = [\n    {\n        label: 'Food Menu', children: [\n            {\n                label: 'Salads', children: [\n                    {label: 'Greek Salad'},\n                    {label: 'Israeli Salad'},\n                    {label: 'Caesar Salad'}\n                ]\n            },\n            {\n                label: 'Steaks', children: [\n                    {label: 'Fillet Steak'},\n                    {label: 'Sirloin Steak'}\n                ]\n            },\n            {\n                label: 'Desserts', children: [\n                    {label: 'Pancakes'},\n                    {label: 'Muffin'},\n                    {label: 'Waffle'},\n                    {label: 'Cupcake'}\n                ]\n            }\n        ]\n    }\n];\n\nconst changedLabel = 'Kaiserschmarrn';\n\n// duplicating the data so i can pass a new object to the non-mobx version\nconst newTreeData = JSON.parse(JSON.stringify(treeData));\nnewTreeData[0].children![2].children!.push({label: changedLabel});\n\nexport interface TreeViewWrapperState {\n    treeData: object[];\n}\n\nexport class TreeViewWrapper extends React.Component<{}, TreeViewWrapperState> {\n    public state = {treeData};\n\n    public render() {\n        return <TreeView dataSource={this.state.treeData}/>;\n    }\n\n    public switchDataSource = () => {\n        this.setState({\n            treeData: newTreeData\n        });\n    }\n}\n\nexport class TreeViewMobxWrapper extends React.Component<{}, {}> {\n    @observable private obsTreeData: TreeItemData[] = treeData;\n\n    public render() {\n        return <TreeView dataSource={this.obsTreeData}/>;\n    }\n\n    public modifyMobxDataSource = () => {\n        this.obsTreeData[0].children![2].children!.push({label: changedLabel});\n    }\n\n    public renameLabel = () => {\n        this.obsTreeData[0].children![0].label = changedLabel;\n    }\n}\n\nfunction getLabelsList(data: { label: string, children?: object[] }): string[] {\n    return [data.label]\n        .concat(...(data.children || [])\n            .map(getLabelsList));\n}\n\nfunction getAllNodeLabels(data: object[]): string[] {\n    return data.map(getLabelsList).reduce((prev, next) => [...prev, ...next]);\n}\n\ndescribe('<TreeView />', () => {\n    const clientRenderer = new ClientRenderer();\n    afterEach(() => clientRenderer.cleanup());\n\n    const getTreeItem = (id: string) => `${treeItem}_${id.replace(' ', '_')}`;\n    const getTreeItemIcon = (id: string) => `${getTreeItem(id)}_ICON`;\n    const getTreeItemLabel = (id: string) => `${getTreeItem(id)}_LABEL`;\n\n    function expandItemWithLabel(select: (...selectors: string[]) => Element | null, id: string) {\n        simulate.click(select(getTreeItemIcon(id)));\n    }\n\n    function selectItemWithLabel(select: (...selectors: string[]) => Element | null, id: string) {\n        simulate.click(select(getTreeItemLabel(id)));\n    }\n\n    function isElementSelected(element: Element, style: {$stylesheet: Stylesheet}) {\n        return elementHasStylableState(element, style, 'selected');\n    }\n\n    function isElementFocused(element: Element, style: {$stylesheet: Stylesheet}) {\n        return elementHasStylableState(element, style, 'focused');\n    }\n\n    const sampleItem = {label: 'label'};\n    const nestedItem: TreeItemData = treeData[0].children![1];\n\n    const allNodesLabels: string[] = getAllNodeLabels(treeData);\n\n    it('renders a tree view with a few children', async () => {\n        const {select, waitForDom} = clientRenderer.render(<TreeViewDemo />);\n\n        await waitForDom(() => expect(select(treeView + '_DEMO'), 'demo not present').to.be.present());\n\n        const nodeChildren = treeData[0].children;\n        await waitForDom(() => expect(select(getTreeItem(nodeChildren![1].label))).to.be.absent());\n\n        expandItemWithLabel(select, treeData[0].label);\n        nodeChildren!.forEach(child => expandItemWithLabel(select, child.label));\n\n        await waitForDom(() => allNodesLabels.forEach(item =>\n            expect(select(treeView + '_DEMO', getTreeItem(item)), `item did not appear: ${item}`).to.be.present()));\n\n        const elementToSelect = select(treeView + '_DEMO', getTreeItem(allNodesLabels[2]));\n\n        selectItemWithLabel(select, allNodesLabels[2]);\n        return waitForDom(() => expect(isElementSelected(elementToSelect!, treeItemStyle)).to.equal(true));\n    });\n\n    it('renders a tree view with custom children', async () => {\n        const {select, waitForDom} = clientRenderer.render(<TreeViewDemoCustom />);\n\n        await waitForDom(() => expect(select(treeView + '_DEMO_CUSTOM'), 'custom demo not present').to.be.present());\n\n        const nodeChildren = treeData[0].children;\n        await waitForDom(() => expect(select(getTreeItem(nodeChildren![1].label))).to.be.absent());\n\n        expandItemWithLabel(select, treeData[0].label);\n        nodeChildren!.forEach(child => expandItemWithLabel(select, child.label));\n\n        await waitForDom(() => allNodesLabels.forEach(item =>\n            expect(select(treeView + '_DEMO_CUSTOM', getTreeItem(item)),\n                `item did not appear: ${item}`).to.be.present()));\n\n        const elementToSelect = select(treeView + '_DEMO_CUSTOM', getTreeItem(allNodesLabels[2]));\n\n        selectItemWithLabel(select, allNodesLabels[2]);\n        return waitForDom(() => expect(isElementSelected(elementToSelect!, treeViewDemoStyle)).to.equal(true));\n    });\n\n    it('ends up in expected state after multiple clicks on same tree node', async () => {\n        const {select, waitForDom} = clientRenderer.render(<TreeViewDemo />);\n\n        expandItemWithLabel(select, allNodesLabels[0]);\n\n        const elementToSelect = select(treeView + '_DEMO', getTreeItemIcon(allNodesLabels[1]));\n        let elementToAssert = select(treeView + '_DEMO', getTreeItem(allNodesLabels[2]));\n\n        await waitForDom(() => expect(elementToSelect).to.be.present());\n        await waitForDom(() => expect(elementToAssert).to.be.absent());\n\n        expandItemWithLabel(select, allNodesLabels[1]);\n\n        elementToAssert = select(treeView + '_DEMO', getTreeItem(allNodesLabels[2]));\n        await waitForDom(() => expect(elementToAssert).to.be.present());\n\n        expandItemWithLabel(select, allNodesLabels[1]);\n\n        return waitForDom(() => expect(elementToAssert).to.be.absent());\n    });\n\n    it('should rename node label without collapsing tree', async () => {\n        const {select, waitForDom, result} = clientRenderer.render(<TreeViewMobxWrapper />);\n\n        const firstChildLabel = treeData[0].children![0].label;\n\n        expandItemWithLabel(select, treeData[0].label);\n\n        await waitForDom(() => expect(select(getTreeItem(firstChildLabel))).to.have.text(firstChildLabel));\n\n        (result as TreeViewMobxWrapper).renameLabel();\n\n        return waitForDom(() => expect(select(getTreeItem(changedLabel))).to.have.text(changedLabel));\n    });\n\n    describe('Using default renderer', () => {\n        it('renders correct children', () => {\n            const {select, waitForDom} = clientRenderer.render(<TreeView dataSource={treeData} />);\n\n            return waitForDom(() =>\n                treeData.forEach((item: TreeItemData) =>\n                    expect(select(treeView, getTreeItem(item.label)),\n                        `${item.label} was not present`).to.be.present()));\n        });\n\n        it('invokes the onSelectItem callback when an item is clicked', () => {\n            const onSelectItem = sinon.spy();\n            const {select} = clientRenderer.render(<TreeView dataSource={treeData} onSelectItem={onSelectItem} />);\n\n            selectItemWithLabel(select, treeData[0].label);\n\n            return waitFor(() => expect(onSelectItem).to.have.been.calledWithMatch(treeData[0]));\n        });\n\n        describe('Keyboard Navigation', () => {\n            it('expands and collapses focused treeItem when right and left arrows are clicked', async () => {\n                const {select, waitForDom} = clientRenderer.render(<TreeViewDemo />);\n\n                const nodeChildren = treeData[0].children;\n\n                selectItemWithLabel(select, treeData[0].label);\n                expandItemWithLabel(select, treeData[0].label);\n\n                await waitForDom(() => expect(select(getTreeItem(nodeChildren![1].label))).to.be.present());\n\n                simulate.keyDown(select('TREE_VIEW_DEMO', 'TREE_VIEW'), {keyCode: TreeKeyCodes.LEFT});\n                await waitForDom(() => expect(select(getTreeItem(nodeChildren![1].label))).to.be.absent());\n\n                simulate.keyDown(select('TREE_VIEW_DEMO', 'TREE_VIEW'), {keyCode: TreeKeyCodes.RIGHT});\n\n                return waitForDom(() => expect(select(getTreeItem(nodeChildren![1].label))).to.be.present());\n            });\n\n            it('returns to parent if there is after collapsing the element if possible when left is clicked',\n                async () => {\n                    const {select, waitForDom} = clientRenderer.render(<TreeViewDemo />);\n\n                    const nodeChildren = treeData[0].children;\n\n                    expandItemWithLabel(select, treeData[0].label);\n\n                    await waitForDom(() => expect(select(getTreeItem(nodeChildren![1].label))).to.be.present());\n\n                    selectItemWithLabel(select, nodeChildren![1].label);\n\n                    await waitForDom(() => expect(\n                        isElementFocused(select(getTreeItem(nodeChildren![1].label))!, treeItemStyle)).to.equal(true));\n\n                    simulate.keyDown(select('TREE_VIEW_DEMO', 'TREE_VIEW'), {keyCode: TreeKeyCodes.LEFT});\n\n                    return waitForDom(() => expect(\n                        isElementFocused(select(getTreeItem(treeData[0].label))!, treeItemStyle)).to.equal(true));\n                });\n\n            it('moves to child to if there is one after expanding the element if possible when right is clicked',\n                async () => {\n                    const {select, waitForDom} = clientRenderer.render(<TreeViewDemo />);\n\n                    const nodeChildren = treeData[0].children;\n\n                    expandItemWithLabel(select, treeData[0].label);\n\n                    await waitForDom(() => expect(select(getTreeItem(nodeChildren![0].label))).to.be.present());\n\n                    await waitForDom(() => expect(\n                        isElementFocused(select(getTreeItem(treeData[0].label))!, treeItemStyle)).to.equal(true));\n\n                    simulate.keyDown(select('TREE_VIEW_DEMO', 'TREE_VIEW'), {keyCode: TreeKeyCodes.RIGHT});\n\n                    return waitForDom(() => expect(\n                        isElementFocused(select(getTreeItem(nodeChildren![0].label))!, treeItemStyle)).to.equal(true));\n                });\n\n            it('focuses next and previous when down and up arrows are clicked', async () => {\n                const {select, waitForDom} = clientRenderer.render(<TreeViewDemo />);\n\n                const rootNode = getTreeItem(treeData[0].label);\n                const nodeChildren = treeData[0].children;\n\n                selectItemWithLabel(select, treeData[0].label);\n                expandItemWithLabel(select, treeData[0].label);\n\n                // this should assert first child of root is not focused\n                await waitForDom(() => expect(\n                    isElementFocused(select(getTreeItem(nodeChildren![0].label))!, treeItemStyle)).to.equal(false));\n\n                simulate.keyDown(select('TREE_VIEW_DEMO', 'TREE_VIEW'), {keyCode: TreeKeyCodes.DOWN});\n\n                // this should assert first child of root is focused\n                await waitForDom(() => expect(\n                    isElementFocused(select(getTreeItem(nodeChildren![0].label))!, treeItemStyle)).to.equal(true));\n\n                simulate.keyDown(select('TREE_VIEW_DEMO', 'TREE_VIEW'), {keyCode: TreeKeyCodes.UP});\n\n                // this should assert first child of root is not focused\n                return waitForDom(() => {\n                    const item = getTreeItem(nodeChildren![0].label);\n                    expect(isElementFocused(select(item)!, treeItemStyle)).to.equal(false);\n                    expect(isElementFocused(select(rootNode)!, treeItemStyle)).to.equal(true);\n                });\n            });\n\n            it('focuses parent node\\'s next sibling after exhausting current node sibling list', async () => {\n                const {select, waitForDom} = clientRenderer.render(<TreeViewDemo />);\n\n                const nodeChildren = treeData[0].children;\n\n                selectItemWithLabel(select, treeData[0].label);\n                expandItemWithLabel(select, treeData[0].label);\n\n                simulate.keyDown(select('TREE_VIEW_DEMO', 'TREE_VIEW'), {keyCode: TreeKeyCodes.DOWN});\n                simulate.keyDown(select('TREE_VIEW_DEMO', 'TREE_VIEW'), {keyCode: TreeKeyCodes.RIGHT});\n\n                await waitForDom(() => expect(\n                    isElementFocused(select(getTreeItem(nodeChildren![0].label))!, treeItemStyle)).to.equal(true));\n\n                nodeChildren![0].children!.forEach(\n                    () => simulate.keyDown(select('TREE_VIEW_DEMO', 'TREE_VIEW'), {keyCode: TreeKeyCodes.DOWN})\n                );\n\n                const firstSubtreeChildren = nodeChildren![0].children!;\n\n                await waitForDom(() => expect(isElementFocused(select(getTreeItem(\n                    firstSubtreeChildren[firstSubtreeChildren.length - 1].label))!, treeItemStyle)).to.equal(true));\n\n                simulate.keyDown(select('TREE_VIEW_DEMO', 'TREE_VIEW'), {keyCode: TreeKeyCodes.DOWN});\n\n                return waitForDom(() => expect(\n                    isElementFocused(select(getTreeItem(nodeChildren![1].label))!, treeItemStyle)).to.equal(true));\n            });\n\n            it('selects currently focused node on Enter click', async () => {\n                const {select, waitForDom} = clientRenderer.render(<TreeViewDemo />);\n\n                const nodeChildren = treeData[0].children;\n\n                selectItemWithLabel(select, treeData[0].label);\n                expandItemWithLabel(select, treeData[0].label);\n\n                simulate.keyDown(select('TREE_VIEW_DEMO', 'TREE_VIEW'), {keyCode: TreeKeyCodes.DOWN});\n\n                await waitForDom(() => expect(\n                    isElementSelected(select(getTreeItem(nodeChildren![0].label))!, treeItemStyle)).to.equal(false));\n\n                simulate.keyDown(select('TREE_VIEW_DEMO', 'TREE_VIEW'), {keyCode: TreeKeyCodes.ENTER});\n\n                return waitForDom(() => expect(\n                    isElementSelected(select(getTreeItem(nodeChildren![0].label))!, treeItemStyle)).to.equal(true));\n            });\n\n            it('focuses first item when HOME is clicked', async () => {\n                const {select, waitForDom} = clientRenderer.render(<TreeViewDemo />);\n\n                const rootNode = getTreeItem(treeData[0].label);\n\n                selectItemWithLabel(select, treeData[0].label);\n                expandItemWithLabel(select, treeData[0].label);\n\n                simulate.keyDown(select('TREE_VIEW_DEMO', 'TREE_VIEW'), {keyCode: TreeKeyCodes.DOWN});\n                simulate.keyDown(select('TREE_VIEW_DEMO', 'TREE_VIEW'), {keyCode: TreeKeyCodes.DOWN});\n\n                await waitForDom(() => expect(isElementFocused(select(rootNode)!, treeItemStyle)).to.equal(false));\n\n                simulate.keyDown(select('TREE_VIEW_DEMO', 'TREE_VIEW'), {keyCode: TreeKeyCodes.HOME});\n\n                return waitForDom(() => expect(isElementFocused(select(rootNode)!, treeItemStyle)).to.equal(true));\n            });\n\n            it('focuses last item available when END is clicked', async () => {\n                const {select, waitForDom} = clientRenderer.render(<TreeViewDemo />);\n\n                const nodeChildren = treeData[0].children!;\n\n                selectItemWithLabel(select, treeData[0].label);\n                expandItemWithLabel(select, treeData[0].label);\n\n                const lastRootNode = nodeChildren[2];\n                const lastChildren = lastRootNode.children!;\n\n                expandItemWithLabel(select, lastRootNode.label);\n\n                await waitForDom(() =>\n                    expect(isElementFocused(select(getTreeItem(\n                        lastChildren[lastChildren.length - 1].label))!, treeItemStyle)).to.equal(false));\n\n                simulate.keyDown(select('TREE_VIEW_DEMO', 'TREE_VIEW'), {keyCode: TreeKeyCodes.END});\n\n                return waitForDom(() =>\n                    expect(isElementFocused(select(getTreeItem(\n                        lastChildren[lastChildren.length - 1].label))!, treeItemStyle)).to.equal(true));\n            });\n\n            it('cannot focus past first and last elements when clicking up and down respectively', async () => {\n                const {select, waitForDom} = clientRenderer.render(<TreeViewDemo />);\n\n                const rootNode = getTreeItem(treeData[0].label);\n                const nodeChildren = treeData[0].children!;\n\n                expandItemWithLabel(select, treeData[0].label);\n\n                const lastRootNode = nodeChildren[2];\n                const lastChildren = lastRootNode.children!;\n\n                expandItemWithLabel(select, lastRootNode.label);\n\n                simulate.keyDown(select('TREE_VIEW_DEMO', 'TREE_VIEW'), {keyCode: TreeKeyCodes.END});\n                await waitForDom(() =>\n                    expect(isElementFocused(select(getTreeItem(\n                        lastChildren[lastChildren.length - 1].label))!, treeItemStyle)).to.equal(true));\n\n                simulate.keyDown(select('TREE_VIEW_DEMO', 'TREE_VIEW'), {keyCode: TreeKeyCodes.DOWN});\n\n                await waitForDom(() =>\n                    expect(isElementFocused(select(getTreeItem(\n                        lastChildren[lastChildren.length - 1].label))!, treeItemStyle)).to.equal(true));\n\n                simulate.keyDown(select('TREE_VIEW_DEMO', 'TREE_VIEW'), {keyCode: TreeKeyCodes.HOME});\n\n                await expect(isElementFocused(select(rootNode)!, treeItemStyle)).to.equal(true);\n\n                simulate.keyDown(select('TREE_VIEW_DEMO', 'TREE_VIEW'), {keyCode: TreeKeyCodes.UP});\n\n                return expect(isElementFocused(select(rootNode)!, treeItemStyle)).to.equal(true);\n            });\n        });\n\n        describe('Reaction to dataSource changes', () => {\n            it('renders the additional item when a new data array is passed', async () => {\n                const {select, waitForDom, result} = clientRenderer.render(<TreeViewWrapper />);\n\n                expandItemWithLabel(select, treeData[0].label);\n                expandItemWithLabel(select, treeData[0].children![2].label);\n\n                await waitForDom(() =>\n                    expect(select(treeView, getTreeItem('Kaiserschmarrn'))).to.be.absent());\n\n                (result as TreeViewWrapper).switchDataSource();\n                expandItemWithLabel(select, newTreeData[0].label);\n                expandItemWithLabel(select, newTreeData[0].children![2].label);\n\n                return waitForDom(() =>\n                    expect(select(treeView, getTreeItem('Kaiserschmarrn'))).to.be.present());\n            });\n\n            it('renders the additional item when a new data element is added to existing data', async () => {\n                const {select, waitForDom, result} = clientRenderer.render(<TreeViewMobxWrapper />);\n\n                expandItemWithLabel(select, treeData[0].label);\n                expandItemWithLabel(select, treeData[0].children![2].label);\n\n                await waitForDom(() =>\n                    expect(select(treeView, getTreeItem('Kaiserschmarrn'))).to.be.absent());\n\n                (result as TreeViewMobxWrapper).modifyMobxDataSource();\n\n                return waitForDom(() =>\n                    expect(select(treeView, getTreeItem('Kaiserschmarrn'))).to.be.present());\n            });\n        });\n\n        describe('<TreeItem />', () => {\n\n            const stateMap = new TreeViewStateMap();\n            stateMap.getItemState(nestedItem).isExpanded = true;\n\n            it('renders an item', () => {\n                const {select, waitForDom} = clientRenderer.render(\n                    <TreeItem\n                        item={sampleItem}\n                        itemRenderer={TreeItem}\n                        stateMap={stateMap}\n                    />\n                );\n\n                return waitForDom(() => expect(select(getTreeItem(sampleItem.label))).to.be.present());\n            });\n\n            it('renders with provided label', () => {\n                const {select, waitForDom} =\n                    clientRenderer.render(\n                        <TreeItem\n                            item={sampleItem}\n                            itemRenderer={TreeItem}\n                            stateMap={stateMap}\n                        />\n                    );\n\n                return waitForDom(() =>\n                    expect(select(getTreeItem(sampleItem.label) + '_LABEL')).to.have.text(sampleItem.label));\n            });\n\n            it('renders with an icon', () => {\n                const {select, waitForDom} = clientRenderer.render(\n                    <TreeItem\n                        item={treeData[0]}\n                        itemRenderer={TreeItem}\n                        stateMap={stateMap}\n                    />\n                );\n\n                return waitForDom(() => expect(select(getTreeItem(treeData[0].label) + '_ICON')).to.be.present());\n            });\n\n            it('renders correct children', () => {\n                const {select, waitForDom} = clientRenderer.render(\n                    <TreeItem\n                        item={nestedItem}\n                        itemRenderer={TreeItem}\n                        stateMap={stateMap}\n                    />\n                );\n\n                return waitForDom(() =>\n                    nestedItem.children!.forEach((item: TreeItemData) =>\n                        expect(select(getTreeItem(item.label)), `${item.label} was not present`).to.be.present()));\n            });\n\n            it('invokes onClick when clicked', () => {\n                const onClick = sinon.spy();\n                const {select} = clientRenderer.render(\n                    <TreeItem\n                        item={sampleItem}\n                        itemRenderer={TreeItem}\n                        onItemClick={onClick}\n                        stateMap={stateMap}\n                    />\n                );\n\n                simulate.click(select(getTreeItemLabel(sampleItem.label)));\n\n                return waitFor(() => expect(onClick).to.have.been.calledOnce);\n            });\n        });\n\n        describe('Tree Traversal Utils', () => {\n            const treeState: TreeViewStateMap = new TreeViewStateMap();\n\n            treeState.getItemState(treeData[0]).isExpanded = true;\n            treeState.getItemState(treeData[0].children![1]).isExpanded = true;\n\n            const parentsMap: TreeViewParentsMap = new Map<TreeItemData, TreeItemData | undefined>();\n            initParentsMap(parentsMap, treeData, undefined);\n\n            it('gets previous item when its a sibling', async () => {\n                const previous = getPreviousItem(treeData, treeData[0].children![1], treeState, parentsMap);\n                expect(previous.label).to.eql(treeData[0].children![0].label);\n            });\n\n            it('gets previous item when its a parent', async () => {\n                const previous = getPreviousItem(treeData, treeData[0].children![0], treeState, parentsMap);\n                expect(previous.label).to.eql(treeData[0].label);\n            });\n\n            it('gets next item when its a sibling', async () => {\n                const next = getNextItem(treeData, treeData[0].children![1].children![0], treeState, parentsMap);\n                expect(next.label).to.eql(treeData[0].children![1].children![1].label);\n            });\n\n            it('gets next item when its a parent', async () => {\n                const next = getNextItem(treeData, treeData[0].children![1].children![1], treeState, parentsMap);\n                expect(next.label).to.eql(treeData[0].children![2].label);\n            });\n\n            it('selects last available item', async () => {\n                const last = getLastAvailableItem(treeData[0], treeState);\n                expect(last.label).to.eql(treeData[0].children![2].label);\n            });\n        });\n\n        describe('Accessibility', () => {\n            it('puts correct aria values on different parts of the tree', () => {\n                const {select, waitForDom} = clientRenderer.render(<TreeView dataSource={treeData} />);\n\n                const firstChild = treeData[0].children![0];\n                expandItemWithLabel(select, treeData[0].label);\n\n                return waitForDom(() => {\n                    expect(select(treeView)).to.have.attribute('role', 'tree');\n                    expect(select(treeView, getTreeItem(firstChild.label) + '_NODE')).to.have.attr('role', 'treeitem');\n                });\n            });\n        });\n\n        describe('TreeView methods', () => {\n            const firstChild = treeData[0].children![0];\n            const secondChild = treeData[0].children![1];\n\n            async function renderAndExpandPartsOfTree() {\n                const renderResult = clientRenderer.render(<TreeView dataSource={treeData} />);\n                const {select, waitForDom} = renderResult;\n\n                const treeRootIcon = select(treeView, getTreeItemIcon('Food Menu'));\n                simulate.click(treeRootIcon);\n                await waitForDom(() =>\n                    expect(select(treeView, getTreeItemLabel(firstChild.label))).to.be.present());\n\n                simulate.click(select(treeView, getTreeItemIcon(firstChild.label)));\n                await waitForDom(() => expect(select(treeView,\n                    getTreeItemLabel(firstChild.children![0].label))).to.be.present());\n\n                return renderResult;\n            }\n\n            it('collapses a node and its subtree when \\'collapse\\' method is used', async () => {\n                const {select, waitForDom, result} = await renderAndExpandPartsOfTree();\n\n                (result as TreeView).collapse(treeData[0]);\n\n                return waitForDom(() => {\n                    expect(select(treeView, getTreeItemLabel(firstChild.label))).to.be.absent();\n                    expect(select(treeView, getTreeItemLabel(firstChild.children![0].label))).to.be.absent();\n                });\n            });\n\n            it('collapses the whole tree when \\'collapseAll\\' method is used', async () => {\n                const {select, waitForDom, result} = await renderAndExpandPartsOfTree();\n\n                (result as TreeView).collapseAll();\n\n                return waitForDom(() => {\n                    expect(select(treeView, getTreeItemLabel(firstChild.label))).to.be.absent();\n                    expect(select(treeView, getTreeItemLabel(firstChild.children![0].label))).to.be.absent();\n                });\n            });\n\n            it('expands a node and its subtree when \\'expand\\' method is used', async () => {\n                const {select, waitForDom, result} = clientRenderer.render(<TreeView dataSource={treeData} />);\n                const treeRootIcon = select(treeView, getTreeItemIcon('Food Menu'));\n                simulate.click(treeRootIcon);\n\n                await waitForDom(() => expect(select(treeView, getTreeItemLabel(firstChild.label))).to.be.present());\n\n                (result as TreeView).expand(firstChild);\n\n                return waitForDom(() => {\n                    expect(select(treeView, getTreeItemLabel(firstChild.children![0].label))).to.be.present();\n                    expect(select(treeView, getTreeItemLabel(secondChild.children![0].label))).to.be.absent();\n                });\n            });\n\n            it('expands the whole tree when \\'expandAll\\' method is used', async () => {\n                const {select, waitForDom, result} = clientRenderer.render(<TreeView dataSource={treeData} />);\n\n                (result as TreeView).expandAll();\n\n                return waitForDom(() => allNodesLabels.forEach(item =>\n                    expect(select(treeView, getTreeItem(item)), `item did not appear: ${item}`).to.be.present()));\n            });\n\n            it('selects the provided item when \\'selectItem\\' method is used', async () => {\n                const onSelectItem = sinon.spy();\n                const {result} = clientRenderer.render(<TreeView dataSource={treeData} onSelectItem={onSelectItem}/>);\n\n                (result as TreeView).selectItem(treeData[0]);\n\n                return waitFor(() => expect(onSelectItem).to.have.been.calledWithMatch(treeData[0]));\n            });\n        });\n    });\n});\n"]}