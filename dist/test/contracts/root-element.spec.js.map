{"version":3,"file":"root-element.spec.js","sourceRoot":"","sources":["../../../test/contracts/root-element.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import React = require('react');\nimport {findDOMNode} from 'react-dom';\nimport {ClientRenderer, expect, RenderingContext} from 'test-drive-react';\nimport * as WixReactComponents from '../../src';\nimport {isReactComponent} from '../utils/is-react-component';\n\nconst allComponents = Object.keys(WixReactComponents);\nconst failingComponents = [\n    'NumberInput', 'Toggle', 'Portal', 'Popup', 'TimePicker', 'Modal', 'ContextProvider'\n];\n\ndescribe('Root Element contract', () => {\n    allComponents\n        .filter(exportName => failingComponents.indexOf(exportName) === -1)\n        .forEach(exportName => describe(exportName, () => {\n            const ComponentClass = (WixReactComponents as any)[exportName];\n            if (isReactComponent(ComponentClass)) {\n                assertRootElementContract(ComponentClass);\n            }\n    }));\n});\n\nexport function assertRootElementContract(Component: React.ComponentType<any>): void {\n    const clientRenderer = new ClientRenderer();\n    function render<P>(element: React.ReactElement<P>): RenderingContext<P> & { rootNode: Element } {\n        const output = clientRenderer.render(element);\n        return {rootNode: findDOMNode(output.result as React.ReactInstance), ...output};\n    }\n\n    function isDisplayInline(rootNode: Element): boolean {\n        const display = window.getComputedStyle(rootNode).display;\n        return display === 'inline-block' || display === 'inline-flex';\n    }\n\n    afterEach(() => {\n        clientRenderer.cleanup();\n    });\n\n    it('is rendered with default props', () => {\n        const {rootNode} = render(<Component data-automation-id=\"CONTRACT_TEST\"/>);\n        expect(rootNode).to.be.instanceOf(Element);\n    });\n\n    it('performs data-automation-id merge', () => {\n         const {select, rootNode} = render(<Component data-automation-id=\"CONTRACT_TEST\"/>);\n         expect(select('CONTRACT_TEST'), 'data-automation-id not properly merged').to.equal(rootNode);\n    });\n\n    it('performs data-* attribute merge', () => {\n        const customValue = 'some-custom-value';\n        const {rootNode} = render(<Component data-some-custom-attr={customValue}/>);\n        expect(rootNode).to.have.attribute('data-some-custom-attr');\n        expect(rootNode.getAttribute('data-some-custom-attr')).to.contain(customValue);\n    });\n\n    it('performs inline style merge', () => {\n        const sampleColor = 'rgb(255, 0, 0)';\n        const {rootNode} = render(<Component style={{backgroundColor: sampleColor}}/>);\n        expect(getComputedStyle(rootNode).backgroundColor, 'inline style not properly merged').to.equal(sampleColor);\n    });\n\n    it('performs className merge', () => {\n        const testClassName = 'sample-class-name';\n        const {rootNode} = render(<Component className={testClassName}/>);\n        expect(rootNode.classList.contains(testClassName), 'className not properly merged').to.equal(true);\n    });\n\n    it('has display values of \\'inline-block\\' or \\'inline-flex\\'', () => {\n        const {rootNode} = render(<Component />);\n        expect(isDisplayInline(rootNode), 'element display is not \\'inline-block\\' or \\'inline-flex\\'').to.equal(true);\n    });\n}\n"]}