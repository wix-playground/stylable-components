{"version":3,"file":"window.stub.js","sourceRoot":"","sources":["../../../test/stubs/window.stub.ts"],"names":[],"mappings":";;AACA,qDAAuC;AAMvC,0BACI,OAAqB,EACrB,MAAoB,EACpB,IAA6B;IAE7B,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;AACxD,CAAC;AAED;IAAA;QAAA,iBAsDC;QApDU,YAAO,GAAG,wBAAK,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;QAEjC,qBAAgB,GAAG,gBAAgB,CACtC,IAAI,CAAC,OAAO,EAAE,kBAAkB,EAChC,UAAC,IAAY,EAAE,QAA6B;YACxC,IAAM,MAAM,GAAG,KAAI,CAAC,MAAM,CAAC;YAC3B,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACnB,IAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAClC,SAAmC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACxD,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAM,SAAS,GAAG,CAAC,QAAQ,CAAC,CAAC;gBAC7B,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YAChC,CAAC;QACL,CAAC,CACJ,CAAC;QAEK,wBAAmB,GAAG,gBAAgB,CACzC,IAAI,CAAC,OAAO,EAAE,qBAAqB,EACnC,UAAC,IAAY,EAAE,QAA8B;YACzC,IAAM,MAAM,GAAG,KAAI,CAAC,MAAM,CAAC;YAE3B,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACnB,IAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAEnC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACX,IAAM,KAAK,GAAG,SAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;oBAE3C,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;wBACb,SAAU,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;wBAE5B,EAAE,CAAC,CAAC,SAAU,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;4BAC1B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;wBACxB,CAAC;oBACL,CAAC;gBACL,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACxB,CAAC;YACL,CAAC;QACL,CAAC,CACJ,CAAC;QAEM,WAAM,GAAG,IAAI,GAAG,EAAiC,CAAC;IAW9D,CAAC;IATU,6BAAQ,GAAf,UAAgB,IAAY,EAAE,KAA4B;QACtD,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAE3B,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACnB,IAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACnC,SAAU,CAAC,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,KAAK,CAAC,EAAf,CAAe,CAAC,CAAC;QACpD,CAAC;IACL,CAAC;IAEL,iBAAC;AAAD,CAAC,AAtDD,IAsDC","sourcesContent":["import {SinonSandbox, SinonStub} from 'sinon';\nimport {sinon} from 'test-drive-react';\n\nexport type WindowEvent = WindowEventMap[keyof WindowEventMap];\n\ntype WindowEventListener = (e?: Partial<WindowEvent>) => any;\n\nfunction stubWindowMethod(\n    sandbox: SinonSandbox,\n    method: keyof Window,\n    stub: (...args: any[]) => any\n) {\n    return sandbox.stub(window, method).callsFake(stub);\n}\n\nexport default class WindowStub {\n\n    public sandbox = sinon.sandbox.create();\n\n    public addEventListener = stubWindowMethod(\n        this.sandbox, 'addEventListener',\n        (type: string, listener: WindowEventListener) => {\n            const events = this.events;\n            if (events.has(type)) {\n                const listeners = events.get(type);\n                (listeners as WindowEventListener[]).push(listener);\n            } else {\n                const listeners = [listener];\n                events.set(type, listeners);\n            }\n        }\n    );\n\n    public removeEventListener = stubWindowMethod(\n        this.sandbox, 'removeEventListener',\n        (type: string, listener?: WindowEventListener) => {\n            const events = this.events;\n\n            if (events.has(type)) {\n                const listeners = events.get(type);\n\n                if (listener) {\n                    const index = listeners!.indexOf(listener);\n\n                    if (index >= 0) {\n                        listeners!.splice(index, 1);\n\n                        if (listeners!.length === 0) {\n                            events.delete(type);\n                        }\n                    }\n                } else {\n                    events.delete(type);\n                }\n            }\n        }\n    );\n\n    private events = new Map<string, WindowEventListener[]>();\n\n    public simulate(type: string, event?: Partial<WindowEvent>) {\n        const events = this.events;\n\n        if (events.has(type)) {\n            const listeners = events.get(type);\n            listeners!.forEach(listener => listener(event));\n        }\n    }\n\n}\n"]}