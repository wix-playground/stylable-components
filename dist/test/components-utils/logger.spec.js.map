{"version":3,"file":"logger.spec.js","sourceRoot":"","sources":["../../../test/components-utils/logger.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {expect, sinon} from 'test-drive-react';\nimport {overrideGlobalConfig, setGlobalConfig} from 'wix-react-tools';\nimport {createLogger, error, errorOnce, warn, warnOnce} from '../../src/utils/logger';\n\nfunction assertError(fn: sinon.SinonSpy, err: Error) {\n    expect(fn).to.calledOnce;\n    expect(fn.firstCall.args[0]).instanceof(Error);\n    expect(fn.firstCall.args[0]).property('message', err.message);\n}\n\ntype Method = 'warn' | 'error';\nconst methods: Method[] = ['warn', 'error'];\n\ndescribe('logger', () => {\n    let spies: {\n        [key: string]: sinon.SinonSpy\n    } = {};\n    let logger: any;\n    beforeEach(() => {\n        methods.forEach(method => {\n            const fn = sinon.spy();\n            spies[method] = fn;\n            sinon.stub(console, method).callsFake(fn);\n            logger = createLogger();\n        });\n    });\n\n    afterEach(() => {\n        methods.forEach(method => {\n            (console[method] as sinon.SinonExpectation).restore();\n        });\n        spies = {};\n    });\n\n    describe('check exported functions', () => {\n        it('warn() should be a function', () => {\n            expect(warn).to.instanceof(Function);\n        });\n        it('warnOnce() should be a function', () => {\n            expect(warnOnce).to.instanceof(Function);\n        });\n        it('error() should be a function', () => {\n            expect(error).to.instanceof(Function);\n        });\n        it('errorOnce() should be a function', () => {\n            expect(errorOnce).to.instanceof(Function);\n        });\n    });\n\n    describe('setGlobalConfig({devMode: true})', () => {\n        beforeEach(() => {\n            setGlobalConfig({devMode: true});\n        });\n        afterEach(() => {\n            overrideGlobalConfig({});\n        });\n        methods.forEach(method => {\n            describe(method, () => {\n                it('no formating', () => {\n                    logger[method]('Warning message');\n                    assertError(spies[method], new Error('Warning message'));\n                });\n                it('formaring', () => {\n                    logger[method]('Warning message, a=%s, b=%s', 11, 12);\n                    assertError(spies[method], new Error('Warning message, a=11, b=12'));\n                });\n                it('call x 2', () => {\n                    logger[method]('Warning message');\n                    logger[method]('Warning message');\n                    expect(spies[method]).to.calledTwice;\n                });\n                it('call once x 2', () => {\n                    logger[`${method}Once`]('Warning message');\n                    logger[`${method}Once`]('Warning message');\n                    expect(spies[method]).to.calledOnce;\n                });\n            });\n        });\n    });\n\n    describe('setGlobalConfig({devMode: false})', () => {\n        beforeEach(() => {\n            setGlobalConfig({devMode: false});\n        });\n        afterEach(() => {\n            overrideGlobalConfig({});\n        });\n        methods.forEach(method => {\n            describe(method, () => {\n                it('trully condition', () => {\n                    logger[method]('Warning message');\n                    expect(spies[method]).to.not.be.called;\n                });\n                it('no formating', () => {\n                    logger[method]('Warning message');\n                    expect(spies[method]).to.not.be.called;\n                });\n                it('formaring', () => {\n                    logger[method]('Warning message, a=%s, b=%s', 11, 12);\n                    expect(spies[method]).to.not.be.called;\n                });\n            });\n        });\n    });\n\n    describe('no setGlobalConfig', () => {\n        methods.forEach(method => {\n            describe(method, () => {\n                it('trully condition', () => {\n                    logger[method]('Warning message');\n                    expect(spies[method]).to.not.be.called;\n                });\n                it('no formating', () => {\n                    logger[method]('Warning message');\n                    expect(spies[method]).to.not.be.called;\n                });\n                it('formaring', () => {\n                    logger[method]('Warning message, a=%s, b=%s', 11, 12);\n                    expect(spies[method]).to.not.be.called;\n                });\n            });\n        });\n    });\n\n});\n"]}