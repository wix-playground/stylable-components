@namespace "Slider";

:import {
    -st-from: "../../project.st.css";
    -st-named:
        color_Border,
        M0,
        PR2,
        STC5,
        PR4,
        BK1,
        BK2,
        BK3,
        DS1,
        DS2,
        ER1,
        PR2,
        WT1;
}

:vars {
    colorTrack: value(BK3);
    colorTrack_Hover: value(BK2);
    colorProgress: value(PR2);
    colorProgress_Hover: value(PR2);
    colorHandle: value(WT1);
    colorHandle_Hover: value(PR4);
    colorHandle_Active: value(PR2);
    colorHandle_Focus: rgba(92, 180, 255, 0.5);
    colorHandleBorder: value(BK2);
    colorHandle_Disabled: value(DS2);
    color_Error: value(ER1);
    color_Disabled: value(DS1);

    markSize: 8px;
    markRadius: 50%;
    markMiddleOfBar: -2px;
    markMiddleOfDot: -4px;

    focusSize: 4px;

    handleSize: 16px;
    handleWidth: value(handleSize);
    handleHeight: value(handleSize);
    handleRadius: 50%;
    handleBorder: 1px solid value(BK2);
    handleBorderHover: 1px solid value(PR2);

    trackSize: 4px;
    trackRadius: 0px;

    middleOfBar: -6px;
    middleOfHandle: -8px;

    minVerticalSliderHeight: 44px;
    clickableAreaRadius: 15px;
}

.nativeInput {
    position: absolute;
    opacity: 0;
    width: 0;
    height: 0;
    outline: none;
}

.root {
    -st-states: active, disabled, error, x, xReverse, y, yReverse;

    position: relative;
    display: inline-block;
    cursor: pointer;
    outline: none;
    user-select: none;
    pointer-events: inherit;
    touch-action: none;
    -webkit-tap-highlight-color: rgba(0,0,0,0);
    -webkit-touch-callout: none;
}

.root:x {
    width: 100%;
    padding: value(clickableAreaRadius) 0;
}

.root:xReverse {
    width: 100%;
    padding: value(clickableAreaRadius) 0;
}

.root:y {
    min-height: value(minVerticalSliderHeight);
    height: 100%;
    padding: 0 value(clickableAreaRadius);
}

.root:yReverse {
    min-height: value(minVerticalSliderHeight);
    height: 100%;
    padding: 0 value(clickableAreaRadius);
}

.bar {
    position: relative;
    border-radius: value(trackRadius);
    background-color: value(colorTrack);
}

.root:x .bar{
    height: value(trackSize);
    width: 100%;
}

.root:xReverse .bar{
    height: value(trackSize);
    width: 100%;
}

.root:y .bar{
    text-align: left;
    width: value(trackSize);
    height: 100%;
    min-height: value(minVerticalSliderHeight);
}

.root:yReverse .bar{
    text-align: left;
    width: value(trackSize);
    height: 100%;
    min-height: value(minVerticalSliderHeight);
}

.progress {
    position: absolute;
    background-color: value(colorProgress);
    border-radius: value(trackRadius);
}

.root:x .progress{
    left: 0;
    height: inherit;
}

.root:xReverse .progress{
    right: 0;
    height: inherit;
}

.root:y .progress{
    bottom: 0;
    width: inherit;
}

.root:yReverse .progress{
    top: 0;
    width: inherit;
}

.handle {
    -st-states: active;
    position: absolute;
    width: value(handleWidth);
    height: value(handleHeight);
    border-radius: value(handleRadius);
    background-color: value(colorHandle);
    border: solid 1px;
    border-color: value(handleBorder);
    box-sizing: border-box;
}
.handle:hover {
    box-shadow: none;
    background-color: value(colorHandle_Active);
    border-color: value(colorHandle_Active);
}
.handle:active {
    z-index: 1;
}
.handle:active .tooltip {
    display: block;
}
.handle:hover .tooltip {
    display: block;
}

.root:x .handle{
    margin: value(middleOfBar) 0 0 value(middleOfHandle);
}

.root:xReverse .handle{
    margin: value(middleOfBar) value(middleOfHandle) 0px 0px;
}

.root:y .handle{
    margin: 0px 0px value(middleOfHandle) value(middleOfBar);
}

.root:yReverse .handle{
    margin: value(middleOfHandle) 0px 0px value(middleOfBar);
}

.markProgress,
.markTrack
{
    width: value(markSize);
    height: value(markSize);
    position: absolute;
    border-radius: value(markRadius);
}
.markProgress{
    background-color: value(colorProgress);
}
.markTrack{
    background-color: value(colorTrack);
}


.root:x .markProgress,
.root:x .markTrack
{
    margin: value(markMiddleOfBar) 0 0 value(markMiddleOfDot);
}

.root:xReverse .markProgress,
.root:xReverse .markTrack
{
    margin: value(markMiddleOfBar) value(markMiddleOfDot) 0 0;
}

.root:y .markProgress,
.root:y .markTrack
{
    margin: 0 0 value(markMiddleOfDot) value(markMiddleOfBar);
}

.root:yReverse .markProgress,
.root:yReverse .markTrack
{
    margin: value(markMiddleOfDot) 0 0 value(markMiddleOfBar);
}

/* Hover state */
.root:hover .bar {
    background-color: value(colorTrack_Hover);
}

.root:hover .markTrack {
    background-color: value(colorTrack_Hover);
}

.root:hover .handle {
    background-color: value(colorHandle_Hover);
    border-color: value(colorHandle_Active);
}

/* Focus state */
.handle:focus {
    box-shadow: 0 0 0 value(focusSize) value(colorHandle_Focus);
    outline: none;
}

/* Active state */
.root:active .bar {
    background-color: value(colorTrack);
}

.root:active:hover .bar {
    background-color: value(colorTrack);
}

.root:active .markTrack {
    background-color: value(colorTrack);
}

.root:active .progress {
    background-color: value(colorProgress);
}

/* Disabled state */
.root:disabled {
    pointer-events: none;
    cursor: not-allowed;
}

.root:disabled .handle {
    border-color: value(color_Disabled);
    background-color: value(colorHandle_Disabled);
}

.root:disabled .bar {
    background-color: value(color_Disabled);
}

.root:disabled .markTrack {
    background-color: value(color_Disabled);
}

.root:disabled .progress {
    background-color: transparent;
}

/* Error state */
.root:error .markProgress,
.root:error .progress
{
    background-color: value(color_Error);
}
.root:active:error .handle,
.root:active:error:hover .handle {
    background-color: value(color_Error);
    border-color: value(color_Error);
}
